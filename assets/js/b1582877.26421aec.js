"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4062],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,m=c["".concat(o,".").concat(d)]||c[d]||g[d]||i;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6247:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:6},l="Releases",s={unversionedId:"internals/releases",id:"internals/releases",title:"Releases",description:"How a new TigerBeetle release is made. Note that the process is being established, so this document",source:"@site/pages/internals/releases.md",sourceDirName:"internals",slug:"/internals/releases",permalink:"/internals/releases",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/internals/releases.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/internals/testing"}},o={},u=[{value:"What Is a Release?",id:"what-is-a-release",level:2},{value:"Publishing",id:"publishing",level:2},{value:"Triggering a Release",id:"triggering-a-release",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Versioning",id:"versioning",level:2}],p={toc:u},c="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"releases"},"Releases"),(0,a.kt)("p",null,"How a new TigerBeetle release is made. Note that the process is being established, so this document\nmight not perfectly reflect reality just yet."),(0,a.kt)("h2",{id:"what-is-a-release"},"What Is a Release?"),(0,a.kt)("p",null,"TigerBeetle is distributed in binary form. There are two main reasons for this:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"to ensure correctness and rule out large classes of configuration errors, the actual machine code\nmust be tested."),(0,a.kt)("li",{parentName:"ul"},"Zig is not stable yet. Binary releases insulate the users from this instability and keep the\nlanguage as an implementation detail.")),(0,a.kt)("p",null,"TigerBeetle binary is released in lockstep with client libraries. At the moment, implementation\nof the client libraries is tightly integrated and shares code with TigerBeetle, requiring matching\nversions."),(0,a.kt)("p",null,'Canonical form of the "release" is a ',(0,a.kt)("inlineCode",{parentName:"p"},"dist/")," folder with the following artifacts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tigerbeetle/")," subdirectory with ",(0,a.kt)("inlineCode",{parentName:"li"},".zip")," archived ",(0,a.kt)("inlineCode",{parentName:"li"},"tigerbeetle")," binaries built for all supported\narchitectures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dotnet/")," subdirectory with a Nuget package."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"go/")," subdirectory with the source code of the go client and precompiled native libraries for\nall supported platforms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"java/")," subdirectory with a ",(0,a.kt)("inlineCode",{parentName:"li"},".jar")," file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node/")," subdirectory with a ",(0,a.kt)("inlineCode",{parentName:"li"},".tgz")," package for npm.")),(0,a.kt)("h2",{id:"publishing"},"Publishing"),(0,a.kt)("p",null,"Release artifacts are uploaded to appropriate package registries. GitHub release is used for\nsynchronization:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a draft release is created at the start of the publishing process,"),(0,a.kt)("li",{parentName:"ul"},"artifacts are uploaded to GitHub releases, npm, Maven Central, and Nuget. For Go, a new commit\nis pushed to ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/tigerbeetle/tigerbeetle-go"},"https://github.com/tigerbeetle/tigerbeetle-go")),(0,a.kt)("li",{parentName:"ul"},"if publishing to all registries were successfully, the release is marked as non-draft.")),(0,a.kt)("p",null,"All publishing keys are stored as GitHub Actions in the ",(0,a.kt)("inlineCode",{parentName:"p"},"release")," environment."),(0,a.kt)("h2",{id:"triggering-a-release"},"Triggering a Release"),(0,a.kt)("p",null,"Releases are triggered manually, on Monday, by pushing a commit from ",(0,a.kt)("inlineCode",{parentName:"p"},"origin/main")," to\n",(0,a.kt)("inlineCode",{parentName:"p"},"origin/release"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ git fetch origin && git push origin origin/main:release\n")),(0,a.kt)("p",null,"This triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"release.yml")," workflow. The workflow doesn't run unit-tests,\n",(0,a.kt)("a",{parentName:"p",href:"https://graydon2.dreamwidth.org/1597.html"},"not rocket science")," rule is assumed. The workflow\nrequires an approval of at least one other person."),(0,a.kt)("h2",{id:"changelog"},"Changelog"),(0,a.kt)("p",null,"Before triggering a release, update CHANGELOG.md with the changes since the last release. The merge\ncommit for the changelog PR is what is pushed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"release")," branch."),(0,a.kt)("p",null,"For the time being, changelogs are authored manually and centrally. We are likely to switch to\nsomething more automated in the future. You can use the following command to see all merges since\nthe last release:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ git fetch origin && git log --merges origin/release..origin/main\n")),(0,a.kt)("p",null,"Purposes of the changelog:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'For everyone: give project a visible "pulse".'),(0,a.kt)("li",{parentName:"ul"},"For TigerBeetle developers: tell fine grained project evolution story, form shared context,\nprovide material for the monthly newsletter."),(0,a.kt)("li",{parentName:"ul"},"For TigerBeetle users: inform about all visible and potentially relevant changes.")),(0,a.kt)("h2",{id:"versioning"},"Versioning"),(0,a.kt)("p",null,"Because releases are frequent, we avoid specifying the version in the source code. Instead, the\nversion is setup automatically by the release process itself, using sequential build numbers as the\npatch version. It might a case that a particular version is skipped (e.g., if a release partially\nfailed). It is also a possibility that two releases are functionally identical (this means that no\npull requests were merged in a week)."))}g.isMDXComponent=!0}}]);