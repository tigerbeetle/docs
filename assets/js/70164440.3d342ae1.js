"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5383],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),k=i,c=m["".concat(s,".").concat(k)]||m[k]||u[k]||r;return n?a.createElement(c,l(l({ref:t},p),{},{components:n})):a.createElement(c,l({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},7601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:2},l="Transfers",o={unversionedId:"reference/transfers",id:"reference/transfers",title:"Transfers",description:"A transfer is an immutable record of a financial transaction between",source:"@site/pages/reference/transfers.md",sourceDirName:"reference",slug:"/reference/transfers",permalink:"/reference/transfers",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/transfers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Accounts",permalink:"/reference/accounts"},next:{title:"Account Balances",permalink:"/reference/account_balances"}},s={},d=[{value:"Updates",id:"updates",level:3},{value:"Modes",id:"modes",level:2},{value:"Fields",id:"fields",level:2},{value:"<code>id</code>",id:"id",level:3},{value:"<code>debit_account_id</code>",id:"debit_account_id",level:3},{value:"<code>credit_account_id</code>",id:"credit_account_id",level:3},{value:"<code>amount</code>",id:"amount",level:3},{value:"Examples",id:"examples",level:4},{value:"<code>pending_id</code>",id:"pending_id",level:3},{value:"<code>user_data_128</code>",id:"user_data_128",level:3},{value:"<code>user_data_64</code>",id:"user_data_64",level:3},{value:"<code>user_data_32</code>",id:"user_data_32",level:3},{value:"<code>timeout</code>",id:"timeout",level:3},{value:"<code>ledger</code>",id:"ledger",level:3},{value:"<code>code</code>",id:"code",level:3},{value:"<code>flags</code>",id:"flags",level:3},{value:"<code>flags.linked</code>",id:"flagslinked",level:4},{value:"Examples",id:"examples-1",level:5},{value:"<code>flags.pending</code>",id:"flagspending",level:4},{value:"<code>flags.post_pending_transfer</code>",id:"flagspost_pending_transfer",level:4},{value:"<code>flags.void_pending_transfer</code>",id:"flagsvoid_pending_transfer",level:4},{value:"<code>flags.balancing_debit</code>",id:"flagsbalancing_debit",level:4},{value:"Examples",id:"examples-2",level:5},{value:"<code>flags.balancing_credit</code>",id:"flagsbalancing_credit",level:4},{value:"Examples",id:"examples-3",level:5},{value:"<code>timestamp</code>",id:"timestamp",level:3},{value:"Internals",id:"internals",level:2}],p={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transfers"},"Transfers"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer")," is an immutable record of a financial transaction between\ntwo accounts."),(0,i.kt)("p",null,'In TigerBeetle, financial transactions are called "transfers" instead of "transactions" because\nthe latter term is heavily overloaded in the context of databases.'),(0,i.kt)("h3",{id:"updates"},"Updates"),(0,i.kt)("p",null,"Transfers ",(0,i.kt)("em",{parentName:"p"},"cannot be modified")," after creation."),(0,i.kt)("h2",{id:"modes"},"Modes"),(0,i.kt)("p",null,"Transfers can either be Single-Phase, where they are executed immediately, or Two-Phase, where\nthey are first put in a Pending state and then either Posted or Voided. For more details on the\nlatter, see the ",(0,i.kt)("a",{parentName:"p",href:"/design/two-phase-transfers"},"Two-Phase Transfer guide"),"."),(0,i.kt)("p",null,"Fields used by each mode of transfer:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Field"),(0,i.kt)("th",{parentName:"tr",align:null},"Single-Phase"),(0,i.kt)("th",{parentName:"tr",align:null},"Pending"),(0,i.kt)("th",{parentName:"tr",align:null},"Post-Pending"),(0,i.kt)("th",{parentName:"tr",align:null},"Void-Pending"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"id")),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"debit_account_id")),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"credit_account_id")),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount")),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pending_id")),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"user_data_128")),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"user_data_64")),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"user_data_32")),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"timeout")),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"none")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ledger")),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"code")),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flags.linked")),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flags.pending")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flags.post_pending_transfer")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flags.void_pending_transfer")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flags.balancing_debit")),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flags.balancing_credit")),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"optional"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"none")))),(0,i.kt)("h2",{id:"fields"},"Fields"),(0,i.kt)("h3",{id:"id"},(0,i.kt)("inlineCode",{parentName:"h3"},"id")),(0,i.kt)("p",null,"This is a unique identifier for the transaction."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must not be zero or ",(0,i.kt)("inlineCode",{parentName:"li"},"2^128 - 1")),(0,i.kt)("li",{parentName:"ul"},"Must not conflict with another transfer in the cluster")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/design/data-modeling#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id")," section in the data modeling doc")," for more\nrecommendations on choosing an ID scheme."),(0,i.kt)("p",null,"Note that transfer IDs are unique for the cluster -- not the ledger. If you want to store a\nrelationship between multiple transfers, such as indicating that multiple transfers on different\nledgers were part of a single transaction, you should store a transaction ID in one of the\n",(0,i.kt)("a",{parentName:"p",href:"#user_data_128"},(0,i.kt)("inlineCode",{parentName:"a"},"user_data"))," fields."),(0,i.kt)("h3",{id:"debit_account_id"},(0,i.kt)("inlineCode",{parentName:"h3"},"debit_account_id")),(0,i.kt)("p",null,"This refers to the account to debit the transfer's ",(0,i.kt)("a",{parentName:"p",href:"#amount"},(0,i.kt)("inlineCode",{parentName:"a"},"amount")),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," are unset:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Must match an existing account"),(0,i.kt)("li",{parentName:"ul"},"Must not be the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id")))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," are set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id")," is zero, it will be automatically set to the pending transfer's\n",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id")," is nonzero, it must match the corresponding pending transfer's\n",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id"),".")))),(0,i.kt)("h3",{id:"credit_account_id"},(0,i.kt)("inlineCode",{parentName:"h3"},"credit_account_id")),(0,i.kt)("p",null,"This refers to the account to credit the transfer's ",(0,i.kt)("a",{parentName:"p",href:"#amount"},(0,i.kt)("inlineCode",{parentName:"a"},"amount")),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," are unset:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Must match an existing account"),(0,i.kt)("li",{parentName:"ul"},"Must not be the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id")))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," are set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id")," is zero, it will be automatically set to the pending transfer's\n",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id")," is nonzero, it must match the corresponding pending transfer's\n",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id"),".")))),(0,i.kt)("h3",{id:"amount"},(0,i.kt)("inlineCode",{parentName:"h3"},"amount")),(0,i.kt)("p",null,"This is how much should be debited from the ",(0,i.kt)("inlineCode",{parentName:"p"},"debit_account_id")," account\nand credited to the ",(0,i.kt)("inlineCode",{parentName:"p"},"credit_account_id")," account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.balancing_debit")," is set, this is the maximum amount that will be debited/credited,\nwhere the actual transfer amount is determined by the debit account's constraints."),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.balancing_credit")," is set, this is the maximum amount that will be debited/credited,\nwhere the actual transfer amount is determined by the credit account's constraints.")),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," is set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"amount")," is zero, it will be automatically be set to the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"amount"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"amount")," is nonzero, it must be less than or equal to the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"amount"),"."))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," is set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"amount")," is zero, it will be automatically be set to the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"amount"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"amount")," is nonzero, it must be equal to the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"amount"),"."))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.balancing_debit")," and/or ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.balancing_credit")," is set, if ",(0,i.kt)("inlineCode",{parentName:"li"},"amount")," is zero,\nit will automatically be set to the maximum amount that does not violate the corresponding\naccount limits. (Equivalent to setting ",(0,i.kt)("inlineCode",{parentName:"li"},"amount = 2^128 - 1"),")."),(0,i.kt)("li",{parentName:"ul"},"When all of the following flags are not set, ",(0,i.kt)("inlineCode",{parentName:"li"},"amount")," must be nonzero:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flags.balancing_debit")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flags.balancing_credit"))))),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For representing fractional amounts (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"$12.34"),"), see\n",(0,i.kt)("a",{parentName:"li",href:"/design/data-modeling#fractional-amounts-and-asset-scale"},"Fractional Amounts"),"."),(0,i.kt)("li",{parentName:"ul"},"For balancing transfers, see ",(0,i.kt)("a",{parentName:"li",href:"/recipes/close-account"},"Close Account"),".")),(0,i.kt)("h3",{id:"pending_id"},(0,i.kt)("inlineCode",{parentName:"h3"},"pending_id")),(0,i.kt)("p",null,"If this transfer will post or void a pending transfer, ",(0,i.kt)("inlineCode",{parentName:"p"},"pending_id"),"\nreferences that pending transfer. If this is not a post or void\ntransfer, it must be zero."),(0,i.kt)("p",null,"See the section on ",(0,i.kt)("a",{parentName:"p",href:"/design/two-phase-transfers"},"Two-Phase Transfers")," for more information on how the ",(0,i.kt)("inlineCode",{parentName:"p"},"pending_id")," is used."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be zero if neither void nor pending transfer flag is set"),(0,i.kt)("li",{parentName:"ul"},"Must match an existing transfer's ",(0,i.kt)("a",{parentName:"li",href:"#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id"))," if non-zero")),(0,i.kt)("h3",{id:"user_data_128"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_data_128")),(0,i.kt)("p",null,"This is an optional 128-bit secondary identifier to link this transfer to an\nexternal entity or event."),(0,i.kt)("p",null,"As an example, you might generate a ",(0,i.kt)("a",{parentName:"p",href:"/design/data-modeling#tigerbeetle-time-based-identifiers-recommended"},"TigerBeetle Time-Based\nIdentifier")," that ties\ntogether a group of transfers."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/design/data-modeling#user_data"},"Data Modeling"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)")),(0,i.kt)("h3",{id:"user_data_64"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_data_64")),(0,i.kt)("p",null,"This is an optional 64-bit secondary identifier to link this transfer to an\nexternal entity or event."),(0,i.kt)("p",null,"As an example, you might use this field store an external timestamp."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/design/data-modeling#user_data"},"Data Modeling"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 64-bit unsigned integer (8 bytes)")),(0,i.kt)("h3",{id:"user_data_32"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_data_32")),(0,i.kt)("p",null,"This is an optional 32-bit secondary identifier to link this transfer to an\nexternal entity or event."),(0,i.kt)("p",null,"As an example, you might use this field to store a timezone or locale."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/design/data-modeling#user_data"},"Data Modeling"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)")),(0,i.kt)("h3",{id:"timeout"},(0,i.kt)("inlineCode",{parentName:"h3"},"timeout")),(0,i.kt)("p",null,"This is the interval in seconds after a\n",(0,i.kt)("a",{parentName:"p",href:"#flagspending"},(0,i.kt)("inlineCode",{parentName:"a"},"pending"))," transfer's ",(0,i.kt)("a",{parentName:"p",href:"#timestamp"},"arrival at the cluster"),"\nthat it may be ",(0,i.kt)("a",{parentName:"p",href:"#flagspost_pending_transfer"},"posted")," or ",(0,i.kt)("a",{parentName:"p",href:"#flagsvoid_pending_transfer"},"voided"),".\nZero denotes absence of timeout."),(0,i.kt)("p",null,"Non-pending transfers cannot have a timeout."),(0,i.kt)("p",null,"TigerBeetle makes a best-effort approach to remove pending balances of expired transfers automatically:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Transfers expire ",(0,i.kt)("em",{parentName:"p"},"exactly")," at their expiry time (",(0,i.kt)("a",{parentName:"p",href:"#timestamp"},(0,i.kt)("inlineCode",{parentName:"a"},"timestamp")),"\n",(0,i.kt)("em",{parentName:"p"},"plus")," ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout")," converted in nanoseconds).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pending balances will never be removed before its expiry.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expired transfers cannot be manually posted or voided.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It is not guaranteed that the pending balance will be removed exactly at its expiry."),(0,i.kt)("p",{parentName:"li"},"In particular, client requests may observe still-pending balances for expired transfers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pending balances are removed in chronological order by expiry. If multiple transfers expire at\nthe same time, then ordered by the transfer's creation ",(0,i.kt)("a",{parentName:"p",href:"#timestamp"},(0,i.kt)("inlineCode",{parentName:"a"},"timestamp")),"."),(0,i.kt)("p",{parentName:"li"},"If a transfer ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," has expiry ",(0,i.kt)("inlineCode",{parentName:"p"},"E\u2081")," and transfer ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," has expiry ",(0,i.kt)("inlineCode",{parentName:"p"},"E\u2082"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"E\u2081<E\u2082"),",\nif transfer ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," had the pending balance removed, then transfer ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," had the pending\nbalance removed as well."))),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be zero if ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.pending")," is ",(0,i.kt)("em",{parentName:"li"},"not")," set")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout")," is an interval in seconds rather than an absolute timestamp\nbecause this is more robust to clock skew between the cluster and the\napplication. (Watch this talk on\n",(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/7R-Iz6sJG6Q?si=9sD2TpfD29AxUjOY"},"Detecting Clock Sync Failure in Highly Available Systems"),"\non YouTube for more details.)"),(0,i.kt)("h3",{id:"ledger"},(0,i.kt)("inlineCode",{parentName:"h3"},"ledger")),(0,i.kt)("p",null,"This is an identifier that partitions the sets of accounts that can\ntransact with each other."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/design/data-modeling#ledger"},"data modeling")," for more details\nabout how to think about setting up your ledgers."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," is set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"ledger")," is zero, it will be automatically be set to the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"ledger"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"ledger")," is nonzero, it must match the ",(0,i.kt)("inlineCode",{parentName:"li"},"ledger")," value on the pending transfer's\n",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id")," ",(0,i.kt)("strong",{parentName:"li"},"and")," ",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id"),"."))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," are not set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ledger")," must not be zero."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ledger")," must match the ",(0,i.kt)("inlineCode",{parentName:"li"},"ledger")," value on the accounts referenced in\n",(0,i.kt)("inlineCode",{parentName:"li"},"debit_account_id")," ",(0,i.kt)("strong",{parentName:"li"},"and")," ",(0,i.kt)("inlineCode",{parentName:"li"},"credit_account_id"),".")))),(0,i.kt)("h3",{id:"code"},(0,i.kt)("inlineCode",{parentName:"h3"},"code")),(0,i.kt)("p",null,"This is a user-defined enum denoting the reason for (or category of) the\ntransfer."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 16-bit unsigned integer (2 bytes)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," is set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"code")," is zero, it will be automatically be set to the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"code"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"code")," is nonzero, it must match the pending transfer's ",(0,i.kt)("inlineCode",{parentName:"li"},"code"),"."))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.post_pending_transfer")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"flags.void_pending_transfer")," are not set, ",(0,i.kt)("inlineCode",{parentName:"li"},"code")," must not\nbe zero.")),(0,i.kt)("h3",{id:"flags"},(0,i.kt)("inlineCode",{parentName:"h3"},"flags")),(0,i.kt)("p",null,"This specifies (optional) transfer behavior."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 16-bit unsigned integer (2 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Some flags are mutually exclusive; see\n",(0,i.kt)("a",{parentName:"li",href:"/reference/operations/create_transfers#flags_are_mutually_exclusive"},(0,i.kt)("inlineCode",{parentName:"a"},"flags_are_mutually_exclusive")),".")),(0,i.kt)("h4",{id:"flagslinked"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.linked")),(0,i.kt)("p",null,"This flag links the result of this transfer to the outcome of the next transfer in the request such\nthat they will either succeed or fail together."),(0,i.kt)("p",null,"The last transfer in a chain of linked transfers does ",(0,i.kt)("strong",{parentName:"p"},"not")," have this flag set."),(0,i.kt)("p",null,"You can read more about ",(0,i.kt)("a",{parentName:"p",href:"/design/client-requests#linked-events"},"linked events"),"."),(0,i.kt)("h5",{id:"examples-1"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/recipes/currency-exchange"},"Currency Exchange"))),(0,i.kt)("h4",{id:"flagspending"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.pending")),(0,i.kt)("p",null,"Mark the transfer as a ",(0,i.kt)("a",{parentName:"p",href:"/design/two-phase-transfers#reserve-funds-pending-transfer"},"pending transfer"),"."),(0,i.kt)("h4",{id:"flagspost_pending_transfer"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.post_pending_transfer")),(0,i.kt)("p",null,"Mark the transfer as a ",(0,i.kt)("a",{parentName:"p",href:"/design/two-phase-transfers#post-pending-transfer"},"post-pending transfer"),"."),(0,i.kt)("h4",{id:"flagsvoid_pending_transfer"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.void_pending_transfer")),(0,i.kt)("p",null,"Mark the transfer as a ",(0,i.kt)("a",{parentName:"p",href:"/design/two-phase-transfers#void-pending-transfer"},"void-pending transfer"),"."),(0,i.kt)("h4",{id:"flagsbalancing_debit"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.balancing_debit")),(0,i.kt)("p",null,"Transfer at most ",(0,i.kt)("a",{parentName:"p",href:"#amount"},(0,i.kt)("inlineCode",{parentName:"a"},"amount"))," \u2014 automatically transferring less than ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," as necessary\nsuch that ",(0,i.kt)("inlineCode",{parentName:"p"},"debit_account.debits_pending + debit_account.debits_posted \u2264 debit_account.credits_posted"),".\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", transfer at most ",(0,i.kt)("inlineCode",{parentName:"p"},"2^64 - 1")," (i.e. as much as possible)."),(0,i.kt)("p",null,"If the highest amount transferable is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", returns\n",(0,i.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#exceeds_credits"},(0,i.kt)("inlineCode",{parentName:"a"},"exceeds_credits")),"."),(0,i.kt)("p",null,"Retrying a balancing transfer will return\n",(0,i.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#exists_with_different_amount"},(0,i.kt)("inlineCode",{parentName:"a"},"exists_with_different_amount")),"\nif the amount of the retry differs from the amount that was actually transferred."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," of the recorded transfer is set to the actual amount that was transferred, which is\nless than or equal to the amount that was passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"create_transfers"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flags.balancing_debit")," is exclusive with the ",(0,i.kt)("inlineCode",{parentName:"p"},"flags.post_pending_transfer"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"flags.void_pending_transfer"),"\nflags because posting or voiding a pending transfer will never exceed/overflow either account's limits."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flags.balancing_debit")," is compatible with (and orthogonal to) ",(0,i.kt)("inlineCode",{parentName:"p"},"flags.balancing_credit"),"."),(0,i.kt)("h5",{id:"examples-2"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/recipes/close-account"},"Close Account"))),(0,i.kt)("h4",{id:"flagsbalancing_credit"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.balancing_credit")),(0,i.kt)("p",null,"Transfer at most ",(0,i.kt)("a",{parentName:"p",href:"#amount"},(0,i.kt)("inlineCode",{parentName:"a"},"amount"))," \u2014 automatically transferring less than ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," as necessary\nsuch that ",(0,i.kt)("inlineCode",{parentName:"p"},"credit_account.credits_pending + credit_account.credits_posted \u2264 credit_account.debits_posted"),".\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", transfer at most ",(0,i.kt)("inlineCode",{parentName:"p"},"2^64 - 1")," (i.e. as much as possible)."),(0,i.kt)("p",null,"If the highest amount transferable is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", returns\n",(0,i.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#exceeds_debits"},(0,i.kt)("inlineCode",{parentName:"a"},"exceeds_debits")),"."),(0,i.kt)("p",null,"Retrying a balancing transfer will return\n",(0,i.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#exists_with_different_amount"},(0,i.kt)("inlineCode",{parentName:"a"},"exists_with_different_amount")),"\nif the amount of the retry differs from the amount that was actually transferred."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," of the recorded transfer is set to the actual amount that was transferred, which is\nless than or equal to the amount that was passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"create_transfers"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flags.balancing_credit")," is exclusive with the ",(0,i.kt)("inlineCode",{parentName:"p"},"flags.post_pending_transfer"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"flags.void_pending_transfer"),"\nflags because posting or voiding a pending transfer will never exceed/overflow either account's limits."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flags.balancing_credit")," is compatible with (and orthogonal to) ",(0,i.kt)("inlineCode",{parentName:"p"},"flags.balancing_debit"),"."),(0,i.kt)("h5",{id:"examples-3"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/recipes/close-account"},"Close Account"))),(0,i.kt)("h3",{id:"timestamp"},(0,i.kt)("inlineCode",{parentName:"h3"},"timestamp")),(0,i.kt)("p",null,"This is the time the transfer was created, as nanoseconds since\nUNIX epoch."),(0,i.kt)("p",null,"It is set by TigerBeetle to the moment the transfer arrives at\nthe cluster."),(0,i.kt)("p",null,"You can read more about ",(0,i.kt)("a",{parentName:"p",href:"/design/time"},"Time in TigerBeetle"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 64-bit unsigned integer (8 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be set to ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," by the user when the ",(0,i.kt)("inlineCode",{parentName:"li"},"Transfer")," is created")),(0,i.kt)("h2",{id:"internals"},"Internals"),(0,i.kt)("p",null,"If you're curious and want to learn more, you can find the source code\nfor this struct in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/tigerbeetle.zig"},"src/tigerbeetle.zig"),". Search\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"const Transfer = extern struct {"),"."),(0,i.kt)("p",null,"You can find the source code for creating a transfer in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/state_machine.zig"},"src/state_machine.zig"),". Search\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"fn create_transfer("),"."))}u.isMDXComponent=!0}}]);