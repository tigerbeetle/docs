"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9493],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={title:"Python"},s=void 0,o={unversionedId:"clients/python",id:"clients/python",title:"Python",description:"The TigerBeetle client for Python.",source:"@site/pages/clients/python.md",sourceDirName:"clients",slug:"/clients/python",permalink:"/clients/python",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/clients/python.md",tags:[],version:"current",frontMatter:{title:"Python"},sidebar:"tutorialSidebar",previous:{title:"Node.js",permalink:"/clients/node"},next:{title:"Account",permalink:"/reference/account"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Sample projects",id:"sample-projects",level:2},{value:"Creating a Client",id:"creating-a-client",level:2},{value:"Creating Accounts",id:"creating-accounts",level:2},{value:"Account Flags",id:"account-flags",level:3},{value:"Response and Errors",id:"response-and-errors",level:3},{value:"Account Lookup",id:"account-lookup",level:2},{value:"Create Transfers",id:"create-transfers",level:2},{value:"Response and Errors",id:"response-and-errors-1",level:3},{value:"Batching",id:"batching",level:2},{value:"Queues and Workers",id:"queues-and-workers",level:3},{value:"Transfer Flags",id:"transfer-flags",level:2},{value:"Two-Phase Transfers",id:"two-phase-transfers",level:3},{value:"Post a Pending Transfer",id:"post-a-pending-transfer",level:4},{value:"Void a Pending Transfer",id:"void-a-pending-transfer",level:4},{value:"Transfer Lookup",id:"transfer-lookup",level:2},{value:"Get Account Transfers",id:"get-account-transfers",level:2},{value:"Get Account Balances",id:"get-account-balances",level:2},{value:"Query Accounts",id:"query-accounts",level:2},{value:"Query Transfers",id:"query-transfers",level:2},{value:"Linked Events",id:"linked-events",level:2},{value:"Imported Events",id:"imported-events",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tigerbeetle"},"tigerbeetle"),(0,r.kt)("p",null,"The TigerBeetle client for Python."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Linux >= 5.6 is the only production environment we\nsupport. But for ease of development we also support macOS and Windows."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python (or PyPy, etc) >= ",(0,r.kt)("inlineCode",{parentName:"li"},"3.7"))),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"First, create a directory for your project and ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," into the directory."),(0,r.kt)("p",null,"Then, install the TigerBeetle client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"pip install tigerbeetle\n")),(0,r.kt)("p",null,"Now, create ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py")," and copy this into it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nimport tigerbeetle as tb\n\nprint("Import OK!")\n')),(0,r.kt)("p",null,"Finally, build and run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"python3 main.py\n")),(0,r.kt)("p",null,"Now that all prerequisites and dependencies are correctly set\nup, let's dig into using TigerBeetle."),(0,r.kt)("h2",{id:"sample-projects"},"Sample projects"),(0,r.kt)("p",null,"This document is primarily a reference guide to\nthe client. Below are various sample projects demonstrating\nfeatures of TigerBeetle."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/basic/"},"Basic"),": Create two accounts and transfer an amount between them."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/two-phase/"},"Two-Phase Transfer"),": Create two accounts and start a pending transfer between\nthem, then post the transfer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/clients/python/samples/two-phase-many/"},"Many Two-Phase Transfers"),": Create two accounts and start a number of pending transfer\nbetween them, posting and voiding alternating transfers.")),(0,r.kt)("h2",{id:"creating-a-client"},"Creating a Client"),(0,r.kt)("p",null,"A client is created with a cluster ID and replica\naddresses for all replicas in the cluster. The cluster\nID and replica addresses are both chosen by the system that\nstarts the TigerBeetle cluster."),(0,r.kt)("p",null,"Clients are thread-safe and a single instance should be shared\nbetween multiple concurrent tasks."),(0,r.kt)("p",null,"Multiple clients are useful when connecting to more than\none TigerBeetle cluster."),(0,r.kt)("p",null,"In this example the cluster ID is ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and there is one\nreplica. The address is read from the ",(0,r.kt)("inlineCode",{parentName:"p"},"TB_ADDRESS"),"\nenvironment variable and defaults to port ",(0,r.kt)("inlineCode",{parentName:"p"},"3000"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with tb.ClientSync(cluster_id=0, replica_addresses=os.getenv("TB_ADDRESS", "3000")) as client:\n    # Use the client.\n    pass\n')),(0,r.kt)("p",null,"The following are valid addresses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"3000")," (interpreted as ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:3000"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:3000")," (interpreted as ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:3000"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1")," (interpreted as ",(0,r.kt)("inlineCode",{parentName:"li"},"127.0.0.1:3001"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"3001")," is the default port)")),(0,r.kt)("h2",{id:"creating-accounts"},"Creating Accounts"),(0,r.kt)("p",null,"See details for account fields in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/account"},"Accounts\nreference"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"account = tb.Account(\n    id=tb.id(), # TigerBeetle time-based ID.\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=718,\n    flags=0,\n    timestamp=0,\n)\n\naccount_errors = client.create_accounts([account])\n# Error handling omitted.\n")),(0,r.kt)("p",null,"See details for the recommended ID scheme in\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/coding/data-modeling#tigerbeetle-time-based-identifiers-recommended"},"time-based identifiers"),"."),(0,r.kt)("h3",{id:"account-flags"},"Account Flags"),(0,r.kt)("p",null,"The account flags value is a bitfield. See details for\nthese flags in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/account#flags"},"Accounts\nreference"),"."),(0,r.kt)("p",null,"To toggle behavior for an account, combine enum values stored in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"AccountFlags")," object (it's an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum.IntFlag"),") with bitwise-or:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AccountFlags.linked")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AccountFlags.debits_must_not_exceed_credits")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AccountFlags.credits_must_not_exceed_credits")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AccountFlags.history"))),(0,r.kt)("p",null,"For example, to link two accounts where the first account\nadditionally has the ",(0,r.kt)("inlineCode",{parentName:"p"},"debits_must_not_exceed_credits")," constraint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"account0 = tb.Account(\n    id=100,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=tb.AccountFlags.LINKED | tb.AccountFlags.DEBITS_MUST_NOT_EXCEED_CREDITS,\n)\naccount1 = tb.Account(\n    id=101,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=tb.AccountFlags.HISTORY,\n)\n\naccount_errors = client.create_accounts([account0, account1])\n# Error handling omitted.\n")),(0,r.kt)("h3",{id:"response-and-errors"},"Response and Errors"),(0,r.kt)("p",null,"The response is an empty array if all accounts were\ncreated successfully. If the response is non-empty, each\nobject in the response array contains error information\nfor an account that failed. The error object contains an\nerror code and the index of the account in the request\nbatch."),(0,r.kt)("p",null,"See all error conditions in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/requests/create_accounts"},"create_accounts\nreference"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'account0 = tb.Account(\n    id=102,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=0,\n)\naccount1 = tb.Account(\n    id=103,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=0,\n)\naccount2 = tb.Account(\n    id=104,\n    debits_pending=0,\n    debits_posted=0,\n    credits_pending=0,\n    credits_posted=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    ledger=1,\n    code=1,\n    timestamp=0,\n    flags=0,\n)\n\naccount_errors = client.create_accounts([account0, account1, account2])\nfor error in account_errors:\n    if error.result == tb.CreateAccountResult.EXISTS:\n        print(f"Batch account at {error.index} already exists.")\n    else:\n        print(f"Batch account at ${error.index} failed to create: {error.result}.")\n')),(0,r.kt)("p",null,"To handle errors you can compare the result code returned\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"client.create_accounts")," with enum values in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CreateAccountResult")," object."),(0,r.kt)("h2",{id:"account-lookup"},"Account Lookup"),(0,r.kt)("p",null,"Account lookup is batched, like account creation. Pass\nin all IDs to fetch. The account for each matched ID is returned."),(0,r.kt)("p",null,"If no account matches an ID, no object is returned for\nthat account. So the order of accounts in the response is\nnot necessarily the same as the order of IDs in the\nrequest. You can refer to the ID field in the response to\ndistinguish accounts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"accounts = client.lookup_accounts([100, 101])\n")),(0,r.kt)("h2",{id:"create-transfers"},"Create Transfers"),(0,r.kt)("p",null,"This creates a journal entry between two accounts."),(0,r.kt)("p",null,"See details for transfer fields in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/transfer"},"Transfers\nreference"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transfers = [tb.Transfer(\n    id=tb.id(), # TigerBeetle time-based ID.\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n)]\n\ntransfer_errors = client.create_transfers(transfers)\n# Error handling omitted.\n")),(0,r.kt)("p",null,"See details for the recommended ID scheme in\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/coding/data-modeling#tigerbeetle-time-based-identifiers-recommended"},"time-based identifiers"),"."),(0,r.kt)("h3",{id:"response-and-errors-1"},"Response and Errors"),(0,r.kt)("p",null,"The response is an empty array if all transfers were created\nsuccessfully. If the response is non-empty, each object in the\nresponse array contains error information for a transfer that\nfailed. The error object contains an error code and the index of the\ntransfer in the request batch."),(0,r.kt)("p",null,"See all error conditions in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/requests/create_transfers"},"create_transfers\nreference"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'batch = [tb.Transfer(\n    id=1,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n),\n    tb.Transfer(\n    id=2,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n),\n    tb.Transfer(\n    id=3,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n)]\n\ntransfer_errors = client.create_transfers(batch)\nfor error in transfer_errors:\n    if error.result == tb.CreateTransferResult.EXISTS:\n        print(f"Batch transfer at {error.index} already exists.")\n    else:\n        print(f"Batch transfer at {error.index} failed to create: {error.result}.")\n')),(0,r.kt)("p",null,"To handle errors you can compare the result code returned\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"client.create_transfers")," with enum values in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CreateTransferResult")," object."),(0,r.kt)("h2",{id:"batching"},"Batching"),(0,r.kt)("p",null,"TigerBeetle performance is maximized when you batch\nAPI requests. The client does not do this automatically for\nyou. So, for example, you ",(0,r.kt)("em",{parentName:"p"},"can")," insert 1 million transfers\none at a time like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"batch = [] # Array of transfer to create.\nfor transfer in batch:\n    transfer_errors = client.create_transfers([transfer])\n    # Error handling omitted.\n")),(0,r.kt)("p",null,"But the insert rate will be a ",(0,r.kt)("em",{parentName:"p"},"fraction")," of\npotential. Instead, ",(0,r.kt)("strong",{parentName:"p"},"always batch what you can"),"."),(0,r.kt)("p",null,"The maximum batch size is set in the TigerBeetle server. The default\nis 8190."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"batch = [] # Array of transfer to create.\nBATCH_SIZE = 8190 #FIXME\nfor i in range(0, len(batch), BATCH_SIZE):\n    transfer_errors = client.create_transfers(\n        batch[i:min(len(batch), BATCH_SIZE)],\n    )\n    # Error handling omitted.\n")),(0,r.kt)("h3",{id:"queues-and-workers"},"Queues and Workers"),(0,r.kt)("p",null,"If you are making requests to TigerBeetle from workers\npulling jobs from a queue, you can batch requests to\nTigerBeetle by having the worker act on multiple jobs from\nthe queue at once rather than one at a time. i.e. pulling\nmultiple jobs from the queue rather than just one."),(0,r.kt)("h2",{id:"transfer-flags"},"Transfer Flags"),(0,r.kt)("p",null,"The transfer ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," value is a bitfield. See details for these flags in\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/transfer#flags"},"Transfers\nreference"),"."),(0,r.kt)("p",null,"To toggle behavior for a transfer, combine enum values stored in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"TransferFlags")," object (it's an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum.IntFlag"),") with bitwise-or:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TransferFlags.linked")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TransferFlags.pending")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TransferFlags.post_pending_transfer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TransferFlags.void_pending_transfer"))),(0,r.kt)("p",null,"For example, to link ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer1"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transfer0 = tb.Transfer(\n    id=4,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.LINKED,\n    timestamp=0,\n)\ntransfer1 = tb.Transfer(\n    id=5,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=0,\n    timestamp=0,\n)\n\n# Create the transfer\ntransfer_errors = client.create_transfers([transfer0, transfer1])\n# Error handling omitted.\n")),(0,r.kt)("h3",{id:"two-phase-transfers"},"Two-Phase Transfers"),(0,r.kt)("p",null,"Two-phase transfers are supported natively by toggling the appropriate\nflag. TigerBeetle will then adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"credits_pending")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"debits_pending")," fields of the appropriate accounts. A corresponding\npost pending transfer then needs to be sent to post or void the\ntransfer."),(0,r.kt)("h4",{id:"post-a-pending-transfer"},"Post a Pending Transfer"),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"post_pending_transfer"),",\nTigerBeetle will post the transfer. TigerBeetle will atomically roll\nback the changes to ",(0,r.kt)("inlineCode",{parentName:"p"},"debits_pending")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"credits_pending")," of the\nappropriate accounts and apply them to the ",(0,r.kt)("inlineCode",{parentName:"p"},"debits_posted")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"credits_posted")," balances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transfer0 = tb.Transfer(\n    id=6,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.PENDING,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer0])\n# Error handling omitted.\n\ntransfer1 = tb.Transfer(\n    id=7,\n    debit_account_id=102,\n    credit_account_id=103,\n    # Post the entire pending amount.\n    amount=tb.amount_max,\n    pending_id=6,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.POST_PENDING_TRANSFER,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer1])\n# Error handling omitted.\n")),(0,r.kt)("h4",{id:"void-a-pending-transfer"},"Void a Pending Transfer"),(0,r.kt)("p",null,"In contrast, with ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"void_pending_transfer"),",\nTigerBeetle will void the transfer. TigerBeetle will roll\nback the changes to ",(0,r.kt)("inlineCode",{parentName:"p"},"debits_pending")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"credits_pending")," of the\nappropriate accounts and ",(0,r.kt)("strong",{parentName:"p"},"not")," apply them to the ",(0,r.kt)("inlineCode",{parentName:"p"},"debits_posted")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"credits_posted")," balances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transfer0 = tb.Transfer(\n    id=8,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=0,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.PENDING,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer0])\n# Error handling omitted.\n\ntransfer1 = tb.Transfer(\n    id=9,\n    debit_account_id=102,\n    credit_account_id=103,\n    amount=10,\n    pending_id=8,\n    user_data_128=0,\n    user_data_64=0,\n    user_data_32=0,\n    timeout=0,\n    ledger=1,\n    code=720,\n    flags=tb.TransferFlags.VOID_PENDING_TRANSFER,\n    timestamp=0,\n)\n\ntransfer_errors = client.create_transfers([transfer1])\n# Error handling omitted.\n")),(0,r.kt)("h2",{id:"transfer-lookup"},"Transfer Lookup"),(0,r.kt)("p",null,"NOTE: While transfer lookup exists, it is not a flexible query API. We\nare developing query APIs and there will be new methods for querying\ntransfers in the future."),(0,r.kt)("p",null,"Transfer lookup is batched, like transfer creation. Pass in all ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"s to\nfetch, and matched transfers are returned."),(0,r.kt)("p",null,"If no transfer matches an ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", no object is returned for that\ntransfer. So the order of transfers in the response is not necessarily\nthe same as the order of ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"s in the request. You can refer to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field in the response to distinguish transfers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transfers = client.lookup_transfers([1, 2])\n")),(0,r.kt)("h2",{id:"get-account-transfers"},"Get Account Transfers"),(0,r.kt)("p",null,"NOTE: This is a preview API that is subject to breaking changes once we have\na stable querying API."),(0,r.kt)("p",null,"Fetches the transfers involving a given account, allowing basic filter and pagination\ncapabilities."),(0,r.kt)("p",null,"The transfers in the response are sorted by ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," in chronological or\nreverse-chronological order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"filter = tb.AccountFilter(\n    account_id=2,\n    user_data_128=0, # No filter by UserData.\n    user_data_64=0,\n    user_data_32=0,\n    code=0, # No filter by Code.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.AccountFilterFlags.DEBITS | # Include transfer from the debit side.\n    tb.AccountFilterFlags.CREDITS | # Include transfer from the credit side.\n    tb.AccountFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\naccount_transfers = client.get_account_transfers(filter)\n")),(0,r.kt)("h2",{id:"get-account-balances"},"Get Account Balances"),(0,r.kt)("p",null,"NOTE: This is a preview API that is subject to breaking changes once we have\na stable querying API."),(0,r.kt)("p",null,"Fetches the point-in-time balances of a given account, allowing basic filter and\npagination capabilities."),(0,r.kt)("p",null,"Only accounts created with the flag\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/account#flagshistory"},(0,r.kt)("inlineCode",{parentName:"a"},"history"))," set retain\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.tigerbeetle.com/reference/requests/get_account_balances"},"historical balances"),"."),(0,r.kt)("p",null,"The balances in the response are sorted by ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," in chronological or\nreverse-chronological order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"filter = tb.AccountFilter(\n    account_id=2,\n    user_data_128=0, # No filter by UserData.\n    user_data_64=0,\n    user_data_32=0,\n    code=0, # No filter by Code.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.AccountFilterFlags.DEBITS | # Include transfer from the debit side.\n    tb.AccountFilterFlags.CREDITS | # Include transfer from the credit side.\n    tb.AccountFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\naccount_balances = client.get_account_balances(filter)\n")),(0,r.kt)("h2",{id:"query-accounts"},"Query Accounts"),(0,r.kt)("p",null,"NOTE: This is a preview API that is subject to breaking changes once we have\na stable querying API."),(0,r.kt)("p",null,"Query accounts by the intersection of some fields and by timestamp range."),(0,r.kt)("p",null,"The accounts in the response are sorted by ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," in chronological or\nreverse-chronological order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"query_filter = tb.QueryFilter(\n    user_data_128=1000, # Filter by UserData.\n    user_data_64=100,\n    user_data_32=10,\n    code=1, # Filter by Code.\n    ledger=0, # No filter by Ledger.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.QueryFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\nquery_accounts = client.query_accounts(query_filter)\n")),(0,r.kt)("h2",{id:"query-transfers"},"Query Transfers"),(0,r.kt)("p",null,"NOTE: This is a preview API that is subject to breaking changes once we have\na stable querying API."),(0,r.kt)("p",null,"Query transfers by the intersection of some fields and by timestamp range."),(0,r.kt)("p",null,"The transfers in the response are sorted by ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," in chronological or\nreverse-chronological order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"query_filter = tb.QueryFilter(\n    user_data_128=1000, # Filter by UserData.\n    user_data_64=100,\n    user_data_32=10,\n    code=1, # Filter by Code.\n    ledger=0, # No filter by Ledger.\n    timestamp_min=0, # No filter by Timestamp.\n    timestamp_max=0, # No filter by Timestamp.\n    limit=10, # Limit to ten balances at most.\n    flags=tb.QueryFilterFlags.REVERSED, # Sort by timestamp in reverse-chronological order.\n)\n\nquery_transfers = client.query_transfers(query_filter)\n")),(0,r.kt)("h2",{id:"linked-events"},"Linked Events"),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"linked")," flag is specified for an account when creating accounts or\na transfer when creating transfers, it links that event with the next event in the\nbatch, to create a chain of events, of arbitrary length, which all\nsucceed or fail together. The tail of a chain is denoted by the first\nevent without this flag. The last event in a batch may therefore never\nhave the ",(0,r.kt)("inlineCode",{parentName:"p"},"linked")," flag set as this would leave a chain\nopen-ended. Multiple chains or individual events may coexist within a\nbatch to succeed or fail independently."),(0,r.kt)("p",null,"Events within a chain are executed within order, or are rolled back on\nerror, so that the effect of each event in the chain is visible to the\nnext, and so that the chain is either visible or invisible as a unit\nto subsequent events after the chain. The event that was the first to\nbreak the chain will have a unique error result. Other events in the\nchain will have their error result set to ",(0,r.kt)("inlineCode",{parentName:"p"},"linked_event_failed"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"batch = [] # List of tb.Transfers to create.\nlinkedFlag = 0\nlinkedFlag |= tb.TransferFlags.LINKED\n\n# An individual transfer (successful):\nbatch.append(tb.Transfer(id=1))\n\n# A chain of 4 transfers (the last transfer in the chain closes the chain with linked=false):\nbatch.append(tb.Transfer(id=2, flags=linkedFlag)) # Commit/rollback.\nbatch.append(tb.Transfer(id=3, flags=linkedFlag)) # Commit/rollback.\nbatch.append(tb.Transfer(id=2, flags=linkedFlag)) # Fail with exists\nbatch.append(tb.Transfer(id=4, flags=0)) # Fail without committing.\n\n# An individual transfer (successful):\n# This should not see any effect from the failed chain above.\nbatch.append(tb.Transfer(id=2, flags=0 ))\n\n# A chain of 2 transfers (the first transfer fails the chain):\nbatch.append(tb.Transfer(id=2, flags=linkedFlag))\nbatch.append(tb.Transfer(id=3, flags=0))\n\n# A chain of 2 transfers (successful):\nbatch.append(tb.Transfer(id=3, flags=linkedFlag))\nbatch.append(tb.Transfer(id=4, flags=0))\n\ntransfer_errors = client.create_transfers(batch)\n# Error handling omitted.\n")),(0,r.kt)("h2",{id:"imported-events"},"Imported Events"),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"imported")," flag is specified for an account when creating accounts or\na transfer when creating transfers, it allows importing historical events with\na user-defined timestamp."),(0,r.kt)("p",null,"The entire batch of events must be set with the flag ",(0,r.kt)("inlineCode",{parentName:"p"},"imported"),"."),(0,r.kt)("p",null,"It's recommended to submit the whole batch as a ",(0,r.kt)("inlineCode",{parentName:"p"},"linked")," chain of events, ensuring that\nif any event fails, none of them are committed, preserving the last timestamp unchanged.\nThis approach gives the application a chance to correct failed imported events, re-submitting\nthe batch again with the same user-defined timestamps."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# External source of time.\nhistorical_timestamp = 0\n# Events loaded from an external source.\nhistorical_accounts = [] # Loaded from an external source.\nhistorical_transfers = [] # Loaded from an external source.\n\n# First, load and import all accounts with their timestamps from the historical source.\naccounts = []\nfor index, account in enumerate(historical_accounts):\n    # Set a unique and strictly increasing timestamp.\n    historical_timestamp += 1\n    account.timestamp = historical_timestamp\n    # Set the account as `imported`.\n    account.flags = tb.AccountFlags.IMPORTED\n    # To ensure atomicity, the entire batch (except the last event in the chain)\n    # must be `linked`.\n    if index < len(historical_accounts) - 1:\n        account.flags |= tb.AccountFlags.LINKED\n\n    accounts.append(account)\n\naccount_errors = client.create_accounts(accounts)\n# Error handling omitted.\n\n# The, load and import all transfers with their timestamps from the historical source.\ntransfers = []\nfor index, transfer in enumerate(historical_transfers):\n    # Set a unique and strictly increasing timestamp.\n    historical_timestamp += 1\n    transfer.timestamp = historical_timestamp\n    # Set the account as `imported`.\n    transfer.flags = tb.TransferFlags.IMPORTED\n    # To ensure atomicity, the entire batch (except the last event in the chain)\n    # must be `linked`.\n    if index < len(historical_transfers) - 1:\n        transfer.flags |= tb.AccountFlags.LINKED\n\n    transfers.append(transfer)\n\ntransfer_errors = client.create_transfers(transfers)\n# Error handling omitted.\n\n# Since it is a linked chain, in case of any error the entire batch is rolled back and can be retried\n# with the same historical timestamps without regressing the cluster timestamp.\n")))}u.isMDXComponent=!0}}]);