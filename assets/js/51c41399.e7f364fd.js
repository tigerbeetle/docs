"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[962],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},l="Account",o={unversionedId:"reference/account",id:"reference/account",title:"Account",description:"An Account is a record storing the cumulative effect of committed transfers.",source:"@site/pages/reference/account.md",sourceDirName:"reference",slug:"/reference/account",permalink:"/reference/account",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/account.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Node.js",permalink:"/clients/node"},next:{title:"Transfer",permalink:"/reference/transfer"}},s={},d=[{value:"Updates",id:"updates",level:3},{value:"Deletion",id:"deletion",level:3},{value:"Guarantees",id:"guarantees",level:3},{value:"Fields",id:"fields",level:2},{value:"<code>id</code>",id:"id",level:3},{value:"<code>debits_pending</code>",id:"debits_pending",level:3},{value:"<code>debits_posted</code>",id:"debits_posted",level:3},{value:"<code>credits_pending</code>",id:"credits_pending",level:3},{value:"<code>credits_posted</code>",id:"credits_posted",level:3},{value:"<code>user_data_128</code>",id:"user_data_128",level:3},{value:"<code>user_data_64</code>",id:"user_data_64",level:3},{value:"<code>user_data_32</code>",id:"user_data_32",level:3},{value:"<code>reserved</code>",id:"reserved",level:3},{value:"<code>ledger</code>",id:"ledger",level:3},{value:"<code>code</code>",id:"code",level:3},{value:"<code>flags</code>",id:"flags",level:3},{value:"<code>flags.linked</code>",id:"flagslinked",level:4},{value:"<code>flags.debits_must_not_exceed_credits</code>",id:"flagsdebits_must_not_exceed_credits",level:4},{value:"<code>flags.credits_must_not_exceed_debits</code>",id:"flagscredits_must_not_exceed_debits",level:4},{value:"<code>flags.history</code>",id:"flagshistory",level:4},{value:"<code>timestamp</code>",id:"timestamp",level:3},{value:"Internals",id:"internals",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"account"},(0,i.kt)("inlineCode",{parentName:"h1"},"Account")),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"Account")," is a record storing the cumulative effect of committed ",(0,i.kt)("a",{parentName:"p",href:"/reference/transfer"},"transfers"),"."),(0,i.kt)("h3",{id:"updates"},"Updates"),(0,i.kt)("p",null,"Account fields ",(0,i.kt)("em",{parentName:"p"},"cannot be changed by the user")," after creation. However, debits and credits fields\nare updated by TigerBeetle as transfers move money to and from an account."),(0,i.kt)("h3",{id:"deletion"},"Deletion"),(0,i.kt)("p",null,"Accounts ",(0,i.kt)("strong",{parentName:"p"},"cannot be deleted")," after creation. This provides a strong guarantee for an audit trail\n-- and the account record is only 128 bytes."),(0,i.kt)("p",null,"If an account is no longer in use, you may want to\n",(0,i.kt)("a",{parentName:"p",href:"/coding/recipes/close-account"},"zero out its balance"),"."),(0,i.kt)("h3",{id:"guarantees"},"Guarantees"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Accounts are immutable. They are never modified once they are successfully created (excluding\nbalance fields, which are modified by transfers)."),(0,i.kt)("li",{parentName:"ul"},"There is at most one ",(0,i.kt)("inlineCode",{parentName:"li"},"Account")," with a particular ",(0,i.kt)("a",{parentName:"li",href:"#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id")),"."),(0,i.kt)("li",{parentName:"ul"},"The sum of all accounts' ",(0,i.kt)("a",{parentName:"li",href:"#debits_pending"},(0,i.kt)("inlineCode",{parentName:"a"},"debits_pending"))," equals the sum of all accounts'\n",(0,i.kt)("a",{parentName:"li",href:"#credits_pending"},(0,i.kt)("inlineCode",{parentName:"a"},"credits_pending")),"."),(0,i.kt)("li",{parentName:"ul"},"The sum of all accounts' ",(0,i.kt)("a",{parentName:"li",href:"#debits_posted"},(0,i.kt)("inlineCode",{parentName:"a"},"debits_posted"))," equals the sum of all accounts'\n",(0,i.kt)("a",{parentName:"li",href:"#credits_posted"},(0,i.kt)("inlineCode",{parentName:"a"},"credits_posted")),".")),(0,i.kt)("h2",{id:"fields"},"Fields"),(0,i.kt)("h3",{id:"id"},(0,i.kt)("inlineCode",{parentName:"h3"},"id")),(0,i.kt)("p",null,"This is a unique, client-defined identifier for the account."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must not be zero or ",(0,i.kt)("inlineCode",{parentName:"li"},"2^128 - 1")," (the highest 128-bit unsigned integer)"),(0,i.kt)("li",{parentName:"ul"},"Must not conflict with another account in the cluster")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/coding/data-modeling#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id")," section in the data modeling doc")," for more\nrecommendations on choosing an ID scheme."),(0,i.kt)("p",null,"Note that account IDs are unique for the cluster -- not per ledger. If you want to store a\nrelationship between accounts, such as indicating that multiple accounts on different ledgers belong\nto the same user, you should store a user ID in one of the ",(0,i.kt)("a",{parentName:"p",href:"#user_data_128"},(0,i.kt)("inlineCode",{parentName:"a"},"user_data"))," fields."),(0,i.kt)("h3",{id:"debits_pending"},(0,i.kt)("inlineCode",{parentName:"h3"},"debits_pending")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"debits_pending")," counts debits reserved by pending transfers. When a pending transfer posts, voids,\nor times out, the amount is removed from ",(0,i.kt)("inlineCode",{parentName:"p"},"debits_pending"),"."),(0,i.kt)("p",null,"Money in ",(0,i.kt)("inlineCode",{parentName:"p"},"debits_pending")," is reserved \u2014 that is, it cannot be spent until the corresponding pending\ntransfer resolves."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,i.kt)("h3",{id:"debits_posted"},(0,i.kt)("inlineCode",{parentName:"h3"},"debits_posted")),(0,i.kt)("p",null,"Amount of posted debits."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,i.kt)("h3",{id:"credits_pending"},(0,i.kt)("inlineCode",{parentName:"h3"},"credits_pending")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"credits_pending")," counts credits reserved by pending transfers. When a pending transfer posts,\nvoids, or times out, the amount is removed from ",(0,i.kt)("inlineCode",{parentName:"p"},"credits_pending"),"."),(0,i.kt)("p",null,"Money in ",(0,i.kt)("inlineCode",{parentName:"p"},"credits_pending")," is reserved \u2014 that is, it cannot be spent until the corresponding pending\ntransfer resolves."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,i.kt)("h3",{id:"credits_posted"},(0,i.kt)("inlineCode",{parentName:"h3"},"credits_posted")),(0,i.kt)("p",null,"Amount of posted credits."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,i.kt)("h3",{id:"user_data_128"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_data_128")),(0,i.kt)("p",null,"This is an optional 128-bit secondary identifier to link this account to an external entity or\nevent."),(0,i.kt)("p",null,"When set to zero, no secondary identifier will be associated with the account, therefore only\nnon-zero values can be used as ",(0,i.kt)("a",{parentName:"p",href:"/reference/query-filter"},"query filter"),"."),(0,i.kt)("p",null,"As an example, you might use a\n",(0,i.kt)("a",{parentName:"p",href:"/coding/data-modeling#tigerbeetle-time-based-identifiers-recommended"},"ULID")," that ties together\na group of accounts."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/coding/data-modeling#user_data"},"Data Modeling"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)")),(0,i.kt)("h3",{id:"user_data_64"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_data_64")),(0,i.kt)("p",null,"This is an optional 64-bit secondary identifier to link this account to an external entity or event."),(0,i.kt)("p",null,"When set to zero, no secondary identifier will be associated with the account, therefore only\nnon-zero values can be used as ",(0,i.kt)("a",{parentName:"p",href:"/reference/query-filter"},"query filter"),"."),(0,i.kt)("p",null,"As an example, you might use this field store an external timestamp."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/coding/data-modeling#user_data"},"Data Modeling"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 64-bit unsigned integer (8 bytes)")),(0,i.kt)("h3",{id:"user_data_32"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_data_32")),(0,i.kt)("p",null,"This is an optional 32-bit secondary identifier to link this account to an external entity or event."),(0,i.kt)("p",null,"When set to zero, no secondary identifier will be associated with the account, therefore only\nnon-zero values can be used as ",(0,i.kt)("a",{parentName:"p",href:"/reference/query-filter"},"query filter"),"."),(0,i.kt)("p",null,"As an example, you might use this field to store a timezone or locale."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/coding/data-modeling#user_data"},"Data Modeling"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)")),(0,i.kt)("h3",{id:"reserved"},(0,i.kt)("inlineCode",{parentName:"h3"},"reserved")),(0,i.kt)("p",null,"This space may be used for additional data in the future."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 4 bytes"),(0,i.kt)("li",{parentName:"ul"},"Must be zero")),(0,i.kt)("h3",{id:"ledger"},(0,i.kt)("inlineCode",{parentName:"h3"},"ledger")),(0,i.kt)("p",null,"This is an identifier that partitions the sets of accounts that can transact with each other."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/coding/data-modeling#ledgers"},"data modeling")," for more details about how to think about\nsetting up your ledgers."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must not be zero")),(0,i.kt)("h3",{id:"code"},(0,i.kt)("inlineCode",{parentName:"h3"},"code")),(0,i.kt)("p",null,"This is a user-defined enum denoting the category of the account."),(0,i.kt)("p",null,"As an example, you might use codes ",(0,i.kt)("inlineCode",{parentName:"p"},"1000"),"-",(0,i.kt)("inlineCode",{parentName:"p"},"3340")," to indicate asset accounts in general, where ",(0,i.kt)("inlineCode",{parentName:"p"},"1001"),"\nis Bank Account and ",(0,i.kt)("inlineCode",{parentName:"p"},"1002")," is Money Market Account and ",(0,i.kt)("inlineCode",{parentName:"p"},"2003")," is Motor Vehicles and so on."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 16-bit unsigned integer (2 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must not be zero")),(0,i.kt)("h3",{id:"flags"},(0,i.kt)("inlineCode",{parentName:"h3"},"flags")),(0,i.kt)("p",null,"A bitfield that toggles additional behavior."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 16-bit unsigned integer (2 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Some flags are mutually exclusive; see\n",(0,i.kt)("a",{parentName:"li",href:"/reference/requests/create_accounts#flags_are_mutually_exclusive"},(0,i.kt)("inlineCode",{parentName:"a"},"flags_are_mutually_exclusive")),".")),(0,i.kt)("h4",{id:"flagslinked"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.linked")),(0,i.kt)("p",null,"This flag links the result of this account creation to the result of the next one in the request,\nsuch that they will either succeed or fail together."),(0,i.kt)("p",null,"The last account in a chain of linked accounts does ",(0,i.kt)("strong",{parentName:"p"},"not")," have this flag set."),(0,i.kt)("p",null,"You can read more about ",(0,i.kt)("a",{parentName:"p",href:"/reference/requests/#linked-events"},"linked events"),"."),(0,i.kt)("h4",{id:"flagsdebits_must_not_exceed_credits"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.debits_must_not_exceed_credits")),(0,i.kt)("p",null,"When set, transfers will be rejected that would cause this account's debits to exceed credits.\nSpecifically when\n",(0,i.kt)("inlineCode",{parentName:"p"},"account.debits_pending + account.debits_posted + transfer.amount > account.credits_posted"),"."),(0,i.kt)("p",null,"This cannot be set when ",(0,i.kt)("inlineCode",{parentName:"p"},"credits_must_not_exceed_debits")," is also set."),(0,i.kt)("h4",{id:"flagscredits_must_not_exceed_debits"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.credits_must_not_exceed_debits")),(0,i.kt)("p",null,"When set, transfers will be rejected that would cause this account's credits to exceed debits.\nSpecifically when\n",(0,i.kt)("inlineCode",{parentName:"p"},"account.credits_pending + account.credits_posted + transfer.amount > account.debits_posted"),"."),(0,i.kt)("p",null,"This cannot be set when ",(0,i.kt)("inlineCode",{parentName:"p"},"debits_must_not_exceed_credits")," is also set."),(0,i.kt)("h4",{id:"flagshistory"},(0,i.kt)("inlineCode",{parentName:"h4"},"flags.history")),(0,i.kt)("p",null,"When set, the account will retain the history of balances at each transfer."),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("a",{parentName:"p",href:"/reference/requests/get_account_balances"},(0,i.kt)("inlineCode",{parentName:"a"},"get_account_balances"))," operation only works for\naccounts with this flag set."),(0,i.kt)("h3",{id:"timestamp"},(0,i.kt)("inlineCode",{parentName:"h3"},"timestamp")),(0,i.kt)("p",null,"This is the time the account was created, as nanoseconds since UNIX epoch."),(0,i.kt)("p",null,"It is set by TigerBeetle to the moment the account arrives at the cluster."),(0,i.kt)("p",null,"You can read more about ",(0,i.kt)("a",{parentName:"p",href:"/coding/time"},"Time in TigerBeetle"),"."),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type is 64-bit unsigned integer (8 bytes)"),(0,i.kt)("li",{parentName:"ul"},"Must be set to ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," by the user when the ",(0,i.kt)("inlineCode",{parentName:"li"},"Account")," is created")),(0,i.kt)("h2",{id:"internals"},"Internals"),(0,i.kt)("p",null,"If you're curious and want to learn more, you can find the source code for this struct in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/tigerbeetle.zig"},"src/tigerbeetle.zig"),".\nSearch for ",(0,i.kt)("inlineCode",{parentName:"p"},"const Account = extern struct {"),"."),(0,i.kt)("p",null,"You can find the source code for creating an account in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/state_machine.zig"},"src/state_machine.zig"),".\nSearch for ",(0,i.kt)("inlineCode",{parentName:"p"},"fn create_account("),"."))}p.isMDXComponent=!0}}]);