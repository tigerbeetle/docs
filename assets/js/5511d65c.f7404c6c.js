"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8361],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(r),d=i,b=p["".concat(c,".").concat(d)]||p[d]||g[d]||a;return r?n.createElement(b,l(l({ref:t},u),{},{components:r})):n.createElement(b,l({ref:t},u))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5574:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:2},l="Three-node cluster with a single binary",o={unversionedId:"quick-start/single-binary-three",id:"quick-start/single-binary-three",title:"Three-node cluster with a single binary",description:"First, download a prebuilt copy of TigerBeetle.",source:"@site/pages/quick-start/single-binary-three.md",sourceDirName:"quick-start",slug:"/quick-start/single-binary-three",permalink:"/quick-start/single-binary-three",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/quick-start/single-binary-three.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Single-node cluster with a single binary",permalink:"/quick-start/single-binary"},next:{title:"Single-node cluster with Docker",permalink:"/quick-start/with-docker"}},c={},s=[{value:"Running TigerBeetle",id:"running-tigerbeetle",level:2},{value:"Connect with the CLI",id:"connect-with-the-cli",level:3}],u={toc:s},p="wrapper";function g(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"three-node-cluster-with-a-single-binary"},"Three-node cluster with a single binary"),(0,i.kt)("p",null,"First, download a prebuilt copy of TigerBeetle."),(0,i.kt)("p",null,"On macOS/Linux:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"git clone https://github.com/tigerbeetle/tigerbeetle; ./tigerbeetle/bootstrap.sh\n")),(0,i.kt)("p",null,"On Windows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"git clone https://github.com/tigerbeetle/tigerbeetle; .\\tigerbeetle\\bootstrap.ps1\n")),(0,i.kt)("p",null,"Want to build from source locally? Add ",(0,i.kt)("inlineCode",{parentName:"p"},"-build")," as an argument to the bootstrap script."),(0,i.kt)("h2",{id:"running-tigerbeetle"},"Running TigerBeetle"),(0,i.kt)("p",null,"Now create the TigerBeetle data file for each replica"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"./tigerbeetle format --cluster=0 --replica=0 --replica-count=3 0_0.tigerbeetle\n./tigerbeetle format --cluster=0 --replica=1 --replica-count=3 0_1.tigerbeetle\n./tigerbeetle format --cluster=0 --replica=2 --replica-count=3 0_2.tigerbeetle\n")),(0,i.kt)("p",null,"And start each server in a new terminal window:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"./tigerbeetle start --addresses=3000,3001,3002 0_0.tigerbeetle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"./tigerbeetle start --addresses=3000,3001,3002 0_1.tigerbeetle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"./tigerbeetle start --addresses=3000,3001,3002 0_2.tigerbeetle\n")),(0,i.kt)("p",null,"TigerBeetle uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"--replica")," that's stored in the data file as an index into the ",(0,i.kt)("inlineCode",{parentName:"p"},"--addresses"),"\nprovided."),(0,i.kt)("h3",{id:"connect-with-the-cli"},"Connect with the CLI"),(0,i.kt)("p",null,"Now you can connect to the running server with any client. For a quick\nstart, try creating accounts and transfers ",(0,i.kt)("a",{parentName:"p",href:"/quick-start/cli-repl"},"using the TigerBeetle CLI\nclient"),"."))}g.isMDXComponent=!0}}]);