"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2519],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),p=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),h=n,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||a;return r?i.createElement(d,s(s({ref:t},c),{},{components:r})):i.createElement(d,s({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<a;p++)s[p]=r[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4591:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=r(7462),n=(r(7294),r(3905));const a={sidebar_position:6},s="Time",o={unversionedId:"coding/time",id:"coding/time",title:"Time",description:"Time is a critical component of all distributed systems and databases. Within TigerBeetle, we keep",source:"@site/pages/coding/time.md",sourceDirName:"coding",slug:"/coding/time",permalink:"/coding/time",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/coding/time.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Reliable Transaction Submission",permalink:"/coding/reliable-transaction-submission"},next:{title:"Currency Exchange",permalink:"/coding/recipes/currency-exchange"}},l={},p=[{value:"Logical Time",id:"logical-time",level:2},{value:"Physical Time",id:"physical-time",level:2},{value:"Physical Time is Propagated Through Consensus",id:"physical-time-is-propagated-through-consensus",level:3},{value:"Why TigerBeetle Manages Timestamps",id:"why-tigerbeetle-manages-timestamps",level:2},{value:"Timestamps are Totally Ordered",id:"timestamps-are-totally-ordered",level:3},{value:"Further Reading",id:"further-reading",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"time"},"Time"),(0,n.kt)("p",null,"Time is a critical component of all distributed systems and databases. Within TigerBeetle, we keep\ntrack of two types of time: logical time and physical time."),(0,n.kt)("h2",{id:"logical-time"},"Logical Time"),(0,n.kt)("p",null,"TigerBeetle uses ",(0,n.kt)("a",{parentName:"p",href:"https://pmg.csail.mit.edu/papers/vr-revisited.pdf"},"Viewstamped replication")," for\nits consensus protocol. This ensures\n",(0,n.kt)("a",{parentName:"p",href:"http://www.bailis.org/blog/linearizability-versus-serializability/"},"strict serializability")," for all\noperations."),(0,n.kt)("h2",{id:"physical-time"},"Physical Time"),(0,n.kt)("p",null,"TigerBeetle uses physical time in addition to the logical time provided by the consensus algorithm.\nFinancial transactions require physical time for multiple reasons, including:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Liquidity")," - TigerBeetle supports ",(0,n.kt)("a",{parentName:"li",href:"/coding/two-phase-transfers"},"Two-Phase Transfers")," that reserve\nfunds and hold them in a pending state until they are posted, voided, or the transfer times out. A\ntimeout is useful to ensure that the reserved funds are not held in limbo indefinitely."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Compliance and Auditing")," - For regulatory and security purposes, it is useful to have a\nspecific idea of when (in terms of wall clock time) transfers took place.")),(0,n.kt)("h3",{id:"physical-time-is-propagated-through-consensus"},"Physical Time is Propagated Through Consensus"),(0,n.kt)("p",null,'TigerBeetle clusters are distributed systems, so we cannot rely on all replicas in a cluster keeping\ntheir system clocks perfectly in sync. Because of this, we "trust but verify".'),(0,n.kt)("p",null,"In the TigerBeetle consensus protocol messages, replicas exchange timestamp information and monitor\nthe skew of their clock with respect to the other replicas. The system ensures that the clock skew\nis within an acceptable window and may choose to stop processing transactions if the clocks are far\nout of sync."),(0,n.kt)("p",null,"Importantly, the goal is not to reimplement or replace clock synchronization protocols, but to\nverify that the cluster is operating within acceptable error bounds."),(0,n.kt)("h2",{id:"why-tigerbeetle-manages-timestamps"},"Why TigerBeetle Manages Timestamps"),(0,n.kt)("p",null,"Timestamps on ",(0,n.kt)("a",{parentName:"p",href:"/reference/transfer#timestamp"},(0,n.kt)("inlineCode",{parentName:"a"},"Transfer"),"s")," and\n",(0,n.kt)("a",{parentName:"p",href:"/reference/account#timestamp"},(0,n.kt)("inlineCode",{parentName:"a"},"Account"),"s")," are ",(0,n.kt)("strong",{parentName:"p"},"set by the primary node")," in the\nTigerBeetle cluster when it receives the operation."),(0,n.kt)("p",null,"The primary then propagates the operations to all replicas, including the timestamps it determined.\nAll replicas process the state machine transitions deterministically, based on the primary's\ntimestamp -- ",(0,n.kt)("em",{parentName:"p"},"not")," based on their own system time."),(0,n.kt)("p",null,"Primary nodes monitor their clock skew with respect to the other replicas and may abdicate their\nrole as primary if they appear to be far off the rest of the cluster."),(0,n.kt)("p",null,"This is why the ",(0,n.kt)("inlineCode",{parentName:"p"},"timestamp")," field must be set to ",(0,n.kt)("inlineCode",{parentName:"p"},"0")," when operations are submitted, and it is then\nset by the primary."),(0,n.kt)("p",null,"Similarly, the ",(0,n.kt)("a",{parentName:"p",href:"/reference/transfer#timeout"},(0,n.kt)("inlineCode",{parentName:"a"},"Transfer.timeout"))," is given as an interval\nin seconds, rather than as an absolute timestamp, because it is also managed by the primary. The\n",(0,n.kt)("inlineCode",{parentName:"p"},"timeout")," is calculated relative to the ",(0,n.kt)("inlineCode",{parentName:"p"},"timestamp")," when the operation arrives at the primary."),(0,n.kt)("h3",{id:"timestamps-are-totally-ordered"},"Timestamps are Totally Ordered"),(0,n.kt)("p",null,"All ",(0,n.kt)("inlineCode",{parentName:"p"},"timestamp"),"s within TigerBeetle are unique, immutable and\n",(0,n.kt)("a",{parentName:"p",href:"http://book.mixu.net/distsys/time.html"},"totally ordered"),". A transfer that is created before another\ntransfer is guaranteed to have an earlier ",(0,n.kt)("inlineCode",{parentName:"p"},"timestamp")," (even if they were created in the same\nrequest)."),(0,n.kt)("p",null,'In other systems this is also called a "physical" timestamp, "ingestion" timestamp, "record"\ntimestamp, or "system" timestamp.'),(0,n.kt)("h2",{id:"further-reading"},"Further Reading"),(0,n.kt)("p",null,"Watch this talk on\n",(0,n.kt)("a",{parentName:"p",href:"https://youtu.be/7R-Iz6sJG6Q?si=9sD2TpfD29AxUjOY"},"Detecting Clock Sync Failure in Highly Available Systems"),"\non YouTube for more details."),(0,n.kt)("p",null,"You can also read the blog post\n",(0,n.kt)("a",{parentName:"p",href:"https://tigerbeetle.com/blog/2021-08-30-three-clocks-are-better-than-one"},"Three Clocks are Better than One"),"\nfor more on how nodes determine their own time and clock skew."))}u.isMDXComponent=!0}}]);