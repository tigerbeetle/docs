"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[423],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},332:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:4},o="Hardware",l={unversionedId:"deployment/hardware",id:"deployment/hardware",title:"Hardware",description:"Cluster of replicas",source:"@site/pages/deployment/hardware.md",sourceDirName:"deployment",slug:"/deployment/hardware",permalink:"/deployment/hardware",draft:!1,editUrl:"https://github.com/tigerbeetledb/tigerbeetle/blob/main/docs/deployment/hardware.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"3-node cluster with Docker Compose",permalink:"/deployment/with-docker-compose"},next:{title:"Creating accounts and transfers in the Node CLI",permalink:"/usage/node-cli"}},s={},c=[{value:"Cluster of replicas",id:"cluster-of-replicas",level:2},{value:"Provisioning a cluster",id:"provisioning-a-cluster",level:2},{value:"Provisioning a replica",id:"provisioning-a-replica",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hardware"},"Hardware"),(0,a.kt)("h2",{id:"cluster-of-replicas"},"Cluster of replicas"),(0,a.kt)("p",null,"A TigerBeetle cluster is 6 machines each running the TigerBeetle\nserver for strict serializability, high availability and\ndurability. The TigerBeetle server is a single binary."),(0,a.kt)("p",null,"Each server operates on a single local data file for a total of 6\ndata files across the cluster."),(0,a.kt)("p",null,"The TigerBeetle server (the single binary) plus its single data file\nis called a replica."),(0,a.kt)("p",null,"It is important to ensure independent fault domains for each replica's\ndata file, that each replica's data file is stored on a separate disk\n(required), machine (required), rack (recommended), data center\n(recommended) etc."),(0,a.kt)("h2",{id:"provisioning-a-cluster"},"Provisioning a cluster"),(0,a.kt)("p",null,"A cluster guarantees strict serializability, the highest level of\nconsistency, by automatically electing a primary replica to order and\nbackup transactions across replicas in the cluster."),(0,a.kt)("p",null,"The optimal, recommended size for any production cluster is 6\nreplicas, recognizing advances in flexible consensus quorums."),(0,a.kt)("p",null,"4/6 replicas are required to elect a new primary if the old primary\nfails."),(0,a.kt)("p",null,"A cluster remains highly available (able to process transactions),\npreserving strict serializability, provided that at least 3/6 machines\nhave not failed (provided that the primary has not also failed) or\nprovided that at least 4/6 machines have not failed (if the primary\nalso failed and a new primary needs to be elected)."),(0,a.kt)("p",null,"A cluster preserves durability (surviving, detecting and repairing\ncorruption of any data file) provided that the cluster remains\navailable."),(0,a.kt)("p",null,"A cluster will correctly remain unavailable if too many machine\nfailures have occurred to preserve data. In other words, TigerBeetle\nis designed to operate correctly or else to shut down safely if safe\noperation with respect to strict serializability is no longer possible\ndue to permanent data loss."),(0,a.kt)("p",null,"All 6 replicas may be within the same data center (zero geographic\nfault tolerance), or spread across 2 or more data centers,\navailability zones or regions (\u201csites\u201d) for geographic fault\ntolerance."),(0,a.kt)("p",null,"For mission critical availability, the optimal number of sites is 3,\nsince each site would then contain 2 replicas so that the loss of an\nentire site would not impair the availability of the cluster."),(0,a.kt)("p",null,"If only 2 sites are able to be provisioned, it is recommended to tune\nthe cluster so that at least 4/6 replicas (instead of 3/6 replicas)\nacknowledge each transaction before commit. This would ensure that at\nleast 1 replica in the other site will preserve data durability in the\nevent that an entire site is permanently lost. Furthermore, this would\nensure that the entire cluster would be able to be repaired once the\nlost site is restored."),(0,a.kt)("p",null,"Sites should preferably be within a few milliseconds of each other,\nsince each transaction must be replicated across sites before being\ncommitted."),(0,a.kt)("h2",{id:"provisioning-a-replica"},"Provisioning a replica"),(0,a.kt)("p",null,"TigerBeetle is designed to operate and provide more than adequate\nperformance even on commodity hardware."),(0,a.kt)("p",null,"NVMe is preferred to SSD for high performance deployments."),(0,a.kt)("p",null,"However, spinning rust is perfectly acceptable, especially where a\ncluster is expected to be long lived, and the data file is expected to\nbe large. There is no requirement for NVMe or SSD."),(0,a.kt)("p",null,"A 20 TiB disk containing a replica's data file is enough to address on\nthe order of 50 billion accounts or transfers. It is more important to\nprovision sufficient storage space for a replica\u2019s data file, than to\nprovision high performance storage."),(0,a.kt)("p",null,"A replica's data file may reside on local storage or else on remote\nstorage. The most important concern is to ensure independent fault\ndomains across replicas."),(0,a.kt)("p",null,"The operator may consider the use of RAID 10 to reduce the need for\nremote recovery if a replica's disk fails."),(0,a.kt)("p",null,"ECC memory is recommended for production deployments."),(0,a.kt)("p",null,"TigerBeetle requires only a single core per replica\nmachine. TigerBeetle at present does not utilize more cores, but may\nin future."),(0,a.kt)("p",null,"There are no restrictions on sharing a server with other tenant\nprocesses."),(0,a.kt)("p",null,"A replica requires at least 2 GiB RAM per machine. Between 16 GiB and\n32 GiB or more (depending on budget) is recommended to be allocated to\neach replica for caching. TigerBeetle uses static allocation and will\nuse exactly how much memory is explicitly allocated to it for caching\nvia command line argument."))}u.isMDXComponent=!0}}]);