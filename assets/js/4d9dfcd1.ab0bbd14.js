"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3861],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),h=a,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1002:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:4},o="Reliable Transaction Submission",s={unversionedId:"develop/reliable-transaction-submission",id:"develop/reliable-transaction-submission",title:"Reliable Transaction Submission",description:"When making payments or recording transfers, it is important to ensure that they are recorded once",source:"@site/pages/develop/reliable-transaction-submission.md",sourceDirName:"develop",slug:"/develop/reliable-transaction-submission",permalink:"/develop/reliable-transaction-submission",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/develop/reliable-transaction-submission.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Client Requests",permalink:"/develop/client-requests"},next:{title:"Client Sessions",permalink:"/develop/client-sessions"}},l={},p=[{value:"The App or Browser Should Generate the ID",id:"the-app-or-browser-should-generate-the-id",level:2},{value:"Handling Network Failures",id:"handling-network-failures",level:3},{value:"Handling Client Software Restarts",id:"handling-client-software-restarts",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reliable-transaction-submission"},"Reliable Transaction Submission"),(0,a.kt)("p",null,"When making payments or recording transfers, it is important to ensure that they are recorded once\nand only once -- even if some parts of the system fail during the transaction."),(0,a.kt)("p",null,"There are some subtle gotchas to avoid, so this page describes how to submit events -- and\nespecially transfers -- reliably."),(0,a.kt)("h2",{id:"the-app-or-browser-should-generate-the-id"},"The App or Browser Should Generate the ID"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/reference/transfers#id"},(0,a.kt)("inlineCode",{parentName:"a"},"Transfer"),"s")," and ",(0,a.kt)("a",{parentName:"p",href:"/reference/accounts#id"},(0,a.kt)("inlineCode",{parentName:"a"},"Account"),"s")," carry an\n",(0,a.kt)("inlineCode",{parentName:"p"},"id")," field that is used as an idempotency key to ensure the same object is not created twice."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The client software, such as your app or web page, that the user interacts with should generate the\n",(0,a.kt)("inlineCode",{parentName:"strong"},"id")," (not your API). This ",(0,a.kt)("inlineCode",{parentName:"strong"},"id")," should be persisted locally before submission, and the same ",(0,a.kt)("inlineCode",{parentName:"strong"},"id"),"\nshould be used for subsequent retries.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"User initiates a transfer."),(0,a.kt)("li",{parentName:"ol"},"Client software (app, web page, etc) ",(0,a.kt)("a",{parentName:"li",href:"/develop/data-modeling#id"},"generates the transfer ",(0,a.kt)("inlineCode",{parentName:"a"},"id")),"."),(0,a.kt)("li",{parentName:"ol"},"Client software ",(0,a.kt)("strong",{parentName:"li"},"persists the ",(0,a.kt)("inlineCode",{parentName:"strong"},"id")," in the app or browser local storage.")),(0,a.kt)("li",{parentName:"ol"},"Client software submits the transfer to your ",(0,a.kt)("a",{parentName:"li",href:"/develop/client-requests#example-api-layer-architecture"},"API\nservice"),"."),(0,a.kt)("li",{parentName:"ol"},"API service includes the transfer in a ",(0,a.kt)("a",{parentName:"li",href:"/develop/client-requests"},"request"),"."),(0,a.kt)("li",{parentName:"ol"},"TigerBeetle creates the transfer with the given ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," once and only once."),(0,a.kt)("li",{parentName:"ol"},"TigerBeetle responds to the API service."),(0,a.kt)("li",{parentName:"ol"},"The API service responds to the client software.")),(0,a.kt)("h3",{id:"handling-network-failures"},"Handling Network Failures"),(0,a.kt)("p",null,"The method described above handles various potential network failures. The request may be lost\nbefore it reaches the API service or before it reaches TigerBeetle. Or, the response may be lost on\nthe way back from TigerBeetle."),(0,a.kt)("p",null,"Generating the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," on the client side ensures that transfers can be safely retried. The app must\nuse the same ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," each time the transfer is resent."),(0,a.kt)("p",null,"If the transfer was already created before and then retried, TigerBeetle will return the\n",(0,a.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#exists"},(0,a.kt)("inlineCode",{parentName:"a"},"exists"))," response code. If the transfer had\nnot already been created, it will be created and return the\n",(0,a.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#ok"},(0,a.kt)("inlineCode",{parentName:"a"},"ok")),"."),(0,a.kt)("h3",{id:"handling-client-software-restarts"},"Handling Client Software Restarts"),(0,a.kt)("p",null,"The method described above also handles potential restarts of the app or browser while the request\nis in flight."),(0,a.kt)("p",null,"It is important to ",(0,a.kt)("strong",{parentName:"p"},"persist the ",(0,a.kt)("inlineCode",{parentName:"strong"},"id")," to local storage on the client's device before submitting the\ntransfer"),". When the app or web page reloads, it should resubmit the transfer using the same ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("p",null,"This ensures that the operation can be safely retried even if the client app or browser restarts\nbefore receiving the response to the operation. Similar to the case of a network failure,\nTigerBeetle will respond with the ",(0,a.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#ok"},(0,a.kt)("inlineCode",{parentName:"a"},"ok"))," if a\ntransfer is newly created and ",(0,a.kt)("a",{parentName:"p",href:"/reference/operations/create_transfers#exists"},(0,a.kt)("inlineCode",{parentName:"a"},"exists"))," if an\nobject with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," was already created."))}u.isMDXComponent=!0}}]);