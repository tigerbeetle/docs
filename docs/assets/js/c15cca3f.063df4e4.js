"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[52],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,k=u["".concat(o,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(k,l(l({ref:t},c),{},{components:n})):i.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={},l="Consistency",s={unversionedId:"design/consistency",id:"design/consistency",title:"Consistency",description:"TigerBeetle is designed to guard against bugs not only in its",source:"@site/pages/design/consistency.md",sourceDirName:"design",slug:"/design/consistency",permalink:"/design/consistency",draft:!1,editUrl:"https://github.com/tigerbeetledb/tigerbeetle/blob/main/docs/design/consistency.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Client Sessions",permalink:"/design/client-sessions"},next:{title:"Data modeling",permalink:"/design/data-modeling"}},o={},p=[{value:"Guarantees",id:"guarantees",level:2},{value:"Sessions",id:"sessions",level:4},{value:"Requests",id:"requests",level:4},{value:"Events",id:"events",level:4},{value:"Accounts",id:"accounts",level:4},{value:"Transfers",id:"transfers",level:4},{value:"Reply Order",id:"reply-order",level:3},{value:"Example",id:"example",level:4},{value:"Retries",id:"retries",level:3},{value:"Consistency with Foreign Databases",id:"consistency-with-foreign-databases",level:3},{value:"Example",id:"example-1",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"consistency"},"Consistency"),(0,a.kt)("p",null,"TigerBeetle is designed to guard against bugs not only in its\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md"},"own code"),", but\nat the boundaries, in the application code which interfaces with TigerBeetle.\nThis is exhibited by the client's API design, which may be surprising (see ",(0,a.kt)("a",{parentName:"p",href:"#retries"},"Retries"),") when\ncontrasted with a more conventional database."),(0,a.kt)("p",null,"Strict consistency guarantees (at the database level) simplify 1) application logic and 2) error handling\nfarther up the stack."),(0,a.kt)("h2",{id:"guarantees"},"Guarantees"),(0,a.kt)("p",null,"TigerBeetle provides strict serializability\n(",(0,a.kt)("a",{parentName:"p",href:"http://www.bailis.org/blog/linearizability-versus-serializability/"},"serializability + linearizability"),")\nto each ",(0,a.kt)("a",{parentName:"p",href:"/design/client-sessions"},"client session"),"."),(0,a.kt)("p",null,"But consistency models can seem arcane.\nWhat specific guarantees does TigerBeetle provide to applications?"),(0,a.kt)("h4",{id:"sessions"},"Sessions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A client session may have at most one in-flight request."),(0,a.kt)("li",{parentName:"ul"},"A client session reads its own writes."),(0,a.kt)("li",{parentName:"ul"},"A client session observes writes in the order that they occur on the cluster."),(0,a.kt)("li",{parentName:"ul"},"A client session observes ",(0,a.kt)("a",{parentName:"li",href:"/reference/accounts#debits_posted"},(0,a.kt)("inlineCode",{parentName:"a"},"debits_posted"))," and\n",(0,a.kt)("a",{parentName:"li",href:"/reference/accounts#credits_posted"},(0,a.kt)("inlineCode",{parentName:"a"},"credits_posted"))," as monotonically increasing.\nThat is, a client session will never see ",(0,a.kt)("inlineCode",{parentName:"li"},"credits_posted")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"debits_posted")," decrease."),(0,a.kt)("li",{parentName:"ul"},"A client session never observes uncommitted updates."),(0,a.kt)("li",{parentName:"ul"},"A client session never observes a broken invariant (e.g.\n",(0,a.kt)("a",{parentName:"li",href:"/reference/accounts#flagscredits_must_not_exceed_debits"},(0,a.kt)("inlineCode",{parentName:"a"},"flags.credits_must_not_exceed_debits")),"\nor ",(0,a.kt)("a",{parentName:"li",href:"/reference/transfers#flagslinked"},(0,a.kt)("inlineCode",{parentName:"a"},"flags.linked")),")."),(0,a.kt)("li",{parentName:"ul"},"Multiple client sessions may receive replies ",(0,a.kt)("a",{parentName:"li",href:"#reply-order"},"out of order")," relative to one another."),(0,a.kt)("li",{parentName:"ul"},"A client session can consider a request executed when it receives a reply for the request.")),(0,a.kt)("h4",{id:"requests"},"Requests"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A request executes within the cluster at most once."),(0,a.kt)("li",{parentName:"ul"},"Requests do not ",(0,a.kt)("a",{parentName:"li",href:"#retries"},"time out")," \u2014 a timeout typically implies failure, which cannot be\nconclusively determined in the context of network faults."),(0,a.kt)("li",{parentName:"ul"},"Requests retried by their original client session receive identical replies."),(0,a.kt)("li",{parentName:"ul"},"Requests retried by a different client (same request body, different session) may receive\n",(0,a.kt)("a",{parentName:"li",href:"#consistency-with-foreign-databases"},"different replies"),"."),(0,a.kt)("li",{parentName:"ul"},"Events within a request are executed in sequential order."),(0,a.kt)("li",{parentName:"ul"},"Events within a request do not interleave with events from other requests.\n(TODO: Can timeouts interleave batches, or should we shift the batch so that timeouts land\nentirely before/after?)"),(0,a.kt)("li",{parentName:"ul"},"All events within a request batch are committed, or none are.")),(0,a.kt)("h4",{id:"events"},"Events"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Once committed, an event will always be committed \u2014 the cluster's state never backtracks."),(0,a.kt)("li",{parentName:"ul"},"Within a cluster, object timestamps are unique.\nFor all objects ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"B")," belonging to the same cluster, ",(0,a.kt)("inlineCode",{parentName:"li"},"A.timestamp \u2260 B.timestamp"),"."),(0,a.kt)("li",{parentName:"ul"},"Within a cluster, object timestamps are strictly increasing.\nFor all objects ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"B")," belonging to the same cluster, if ",(0,a.kt)("inlineCode",{parentName:"li"},"A.timestamp < B.timestamp"),",\nthen ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," was committed earlier than ",(0,a.kt)("inlineCode",{parentName:"li"},"B"),"."),(0,a.kt)("li",{parentName:"ul"},"If a client session is terminated and restarts, it is guaranteed to see updates for which the\ncorresponding reply was received prior to termination."),(0,a.kt)("li",{parentName:"ul"},"If a client session is terminated and restarts, it is ",(0,a.kt)("em",{parentName:"li"},"not")," guaranteed to see updates for\nwhich the corresponding reply was ",(0,a.kt)("em",{parentName:"li"},"not")," received prior to the restart. Those updates may\noccur at any point in the future, or never. Handling application crash recovery safely requires\n",(0,a.kt)("a",{parentName:"li",href:"#consistency-with-foreign-databases"},"using ",(0,a.kt)("inlineCode",{parentName:"a"},"id"),"s to idempotently retry events"),".")),(0,a.kt)("h4",{id:"accounts"},"Accounts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Accounts are immutable \u2014 once created, they are never modified\n(excluding balance fields, which are modified by transfers)."),(0,a.kt)("li",{parentName:"ul"},"There is at most one ",(0,a.kt)("inlineCode",{parentName:"li"},"Account")," with a particular ",(0,a.kt)("inlineCode",{parentName:"li"},"id"),"."),(0,a.kt)("li",{parentName:"ul"},"The sum of all accounts' ",(0,a.kt)("inlineCode",{parentName:"li"},"debits_pending")," equals the sum of all accounts' ",(0,a.kt)("inlineCode",{parentName:"li"},"credits_pending"),"."),(0,a.kt)("li",{parentName:"ul"},"The sum of all accounts' ",(0,a.kt)("inlineCode",{parentName:"li"},"debits_posted")," equals the sum of all accounts' ",(0,a.kt)("inlineCode",{parentName:"li"},"credits_posted"),".")),(0,a.kt)("h4",{id:"transfers"},"Transfers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Transfers are immutable \u2014 once created, they are never modified."),(0,a.kt)("li",{parentName:"ul"},"There is at most one ",(0,a.kt)("inlineCode",{parentName:"li"},"Transfer")," with a particular ",(0,a.kt)("inlineCode",{parentName:"li"},"id"),"."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"/reference/transfers#pending-transfer"},"pending transfer")," resolves at most once."),(0,a.kt)("li",{parentName:"ul"},"Transfer ",(0,a.kt)("a",{parentName:"li",href:"/reference/transfers#timeout"},"timeouts")," are deterministic, driven\nby the cluster's timestamp.")),(0,a.kt)("h3",{id:"reply-order"},"Reply Order"),(0,a.kt)("p",null,"Replies to a client session always arrive in order \u2014 a client session may have only one request\nin-flight, and clients ignore (duplicate) replies to their prior requests."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Requests are executed in the order they arrive at the cluster's primary."),(0,a.kt)("li",{parentName:"ul"},"Replies to different clients may arrive out of order.")),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,"Consider two clients ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"B"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Client ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," sends request ",(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081"),"."),(0,a.kt)("li",{parentName:"ol"},"Client ",(0,a.kt)("inlineCode",{parentName:"li"},"B")," sends request ",(0,a.kt)("inlineCode",{parentName:"li"},"B\u2081"),".")),(0,a.kt)("p",null,"Client ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," sent its request first, but requests ",(0,a.kt)("inlineCode",{parentName:"p"},"A\u2081")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"B\u2081")," may execute in either order \u2014\nwhichever arrives first at the primary will execute first."),(0,a.kt)("p",null,"In this diagram, the requests are delivered out of order \u2014 ",(0,a.kt)("inlineCode",{parentName:"p"},"B\u2081")," then ",(0,a.kt)("inlineCode",{parentName:"p"},"A\u2081"),":"),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    participant Client A\n    participant Client B\n    participant (Network)\n    participant Cluster\n    Client A->>(Network): A\u2081 (request)\n    Client B->>(Network): B\u2081 (request)\n    Note over (Network): Request A\u2081 is delayed by the network.\n    (Network)->>Cluster: B\u2081 (request)\n    (Network)->>Cluster: A\u2081 (request)\n    Cluster->>(Network): B\u2081 (reply)\n    Cluster->>(Network): A\u2081 (reply)\n    (Network)->>Client B: B\u2081(reply)\n    (Network)->>Client A: A\u2081 (reply)"}),(0,a.kt)("p",null,"Suppose instead ",(0,a.kt)("inlineCode",{parentName:"p"},"A\u2081")," arrives and executes before ",(0,a.kt)("inlineCode",{parentName:"p"},"B\u2081"),".\nThe replies may be delivered in the same order (",(0,a.kt)("inlineCode",{parentName:"p"},"A\u2081")," then ",(0,a.kt)("inlineCode",{parentName:"p"},"B\u2081"),"), or they may be reordered, as shown below:"),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    participant Client A\n    participant Client B\n    participant (Network)\n    participant Cluster\n    Client A->>(Network): A\u2081 (request)\n    Client B->>(Network): B\u2081 (request)\n    (Network)->>Cluster: A\u2081 (request)\n    (Network)->>Cluster: B\u2081 (request)\n    Cluster->>(Network): A\u2081 (reply)\n    Cluster->>(Network): B\u2081 (reply)\n    Note over (Network): Reply A\u2081 is delayed by the network.\n    (Network)->>Client B: B\u2081(reply)\n    (Network)->>Client A: A\u2081 (reply)"}),(0,a.kt)("h3",{id:"retries"},"Retries"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"/design/client-sessions"},"client session")," will automatically retry a request until either:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the client receives a corresponding reply from the cluster, or"),(0,a.kt)("li",{parentName:"ul"},"the client is terminated.")),(0,a.kt)("p",null,"Unlike most database or RPC clients:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the TigerBeetle client will never time out"),(0,a.kt)("li",{parentName:"ul"},"the TigerBeetle client has no retry limits"),(0,a.kt)("li",{parentName:"ul"},"the TigerBeetle client does not surface network errors")),(0,a.kt)("p",null,"With TigerBeetle's strict consistency model, surfacing these errors at the client/application level\nwould be misleading. An error would imply that a request did not execute, when that is not known:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A request delayed by the network could execute after its timeout."),(0,a.kt)("li",{parentName:"ul"},"A reply delayed by the network could execute before its timeout.")),(0,a.kt)("h3",{id:"consistency-with-foreign-databases"},"Consistency with Foreign Databases"),(0,a.kt)("p",null,"TigerBeetle objects may correspond to objects in a foreign data store (e.g. another DBMS). Keeping\nmultiple data stores consistent (in sync) is subtle in the context of application process faults."),(0,a.kt)("p",null,"Object creation events are idempotent, but only the first attempt will return ",(0,a.kt)("inlineCode",{parentName:"p"},".ok"),",\nwhile all successive identical attempts return ",(0,a.kt)("inlineCode",{parentName:"p"},".exists"),". The client may crash after creating\nthe object, but before receiving the ",(0,a.kt)("inlineCode",{parentName:"p"},".ok")," reply. Because the session resets, neither that client\nnor any others will see the object's corresponding ",(0,a.kt)("inlineCode",{parentName:"p"},".ok")," result."),(0,a.kt)("p",null,"Therefore, to recover to the correct state after a crash, an application that synchronizes updates\nbetween multiple data stores must treat ",(0,a.kt)("inlineCode",{parentName:"p"},".exists")," as equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},".ok"),"."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("p",null,"Suppose that an application creates users within Postgres, and for each user a\ncorresponding ",(0,a.kt)("inlineCode",{parentName:"p"},"Account")," in TigerBeetle."),(0,a.kt)("p",null,"This scenario depicts the typical case:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Create user ",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081")," in Postgres with ",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081.account_id = A\u2081")," and\n",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081.account_exists = false"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),': Send "create account" request ',(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081")," to the cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Cluster"),": Create ",(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081"),"; reply ",(0,a.kt)("inlineCode",{parentName:"li"},"ok"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Receive reply ",(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081: ok")," from the cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Set ",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081.account_exists = true"),".")),(0,a.kt)("p",null,"But suppose the application crashes and restarts immediately after sending its request (step 2):"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Create user ",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081")," in Postgres with ",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081.account_id = A\u2081")," and\n",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081.account_exists = false"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),': Send "create account" request ',(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081")," to the cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Crash. Restart."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Cluster"),": Create ",(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081"),"; reply ",(0,a.kt)("inlineCode",{parentName:"li"},"ok")," \u2014 but the application session has reset,\nso this reply never reaches the application)."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),': Send "create account" request ',(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081")," to the cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Cluster"),": Create ",(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081"),"; reply ",(0,a.kt)("inlineCode",{parentName:"li"},"exists"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Receive reply ",(0,a.kt)("inlineCode",{parentName:"li"},"A\u2081: exists")," from the cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Application"),": Set ",(0,a.kt)("inlineCode",{parentName:"li"},"U\u2081.account_exists = true"),".")),(0,a.kt)("p",null,"In the second case, the application observes that the account is created by receiving ",(0,a.kt)("inlineCode",{parentName:"p"},".exists"),"\n(step 6) instead of ",(0,a.kt)("inlineCode",{parentName:"p"},".ok"),"."),(0,a.kt)("p",null,"Note that the retry (step 5) reused the same account ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," from the original request (step 2).\nAn alternate approach is to generate a new account ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),' for each "create account" attempt,\nand perhaps store the account\'s ',(0,a.kt)("inlineCode",{parentName:"p"},"id")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"U\u2081")," when it is successfully created.\nThen account creation could be restricted to the ",(0,a.kt)("inlineCode",{parentName:"p"},".ok")," code \u2014 but application restarts would leave\norphaned accounts in TigerBeetle, which may be confusing for auditing and debugging."))}d.isMDXComponent=!0}}]);