"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,d=u["".concat(o,".").concat(h)]||u[h]||m[h]||i;return n?r.createElement(d,s(s({ref:t},c),{},{components:n})):r.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4882:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},s="Client Requests",l={unversionedId:"design/client-requests",id:"design/client-requests",title:"Client Requests",description:"A request is a batch of one or more [operation",source:"@site/pages/design/client-requests.md",sourceDirName:"design",slug:"/design/client-requests",permalink:"/design/client-requests",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/design/client-requests.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Two-Phase Transfers",permalink:"/design/two-phase-transfers"},next:{title:"Client Sessions",permalink:"/design/client-sessions"}},o={},p=[{value:"Batching Events",id:"batching-events",level:2},{value:"Example API Layer Architecture",id:"example-api-layer-architecture",level:2},{value:"Queues and Workers",id:"queues-and-workers",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"client-requests"},"Client Requests"),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"request")," is a ",(0,a.kt)("a",{parentName:"p",href:"#batching-events"},"batch")," of one or more ",(0,a.kt)("a",{parentName:"p",href:"/reference/operations/"},"operation\nevents")," sent to the cluster in a single message."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All events within a request batch must be of the same\n",(0,a.kt)("a",{parentName:"li",href:"/reference/operations/"},"operation")," type. You cannot, for example, create accounts and\ntransfers in the same request."),(0,a.kt)("li",{parentName:"ul"},"The cluster commits an entire batch at once. Events are applied in series, such that successive\nevents observe the effects of previous ones and event timestamps are ",(0,a.kt)("a",{parentName:"li",href:"/design/time#timestamps-are-totally-ordered"},"totally\nordered"),"."),(0,a.kt)("li",{parentName:"ul"},"Events within a request ",(0,a.kt)("a",{parentName:"li",href:"/reference/operations/create_transfers#result"},"succeed or fail"),"\nindependently unless they are explicitly ",(0,a.kt)("a",{parentName:"li",href:"/reference/transfers#flagslinked"},"linked"),"."),(0,a.kt)("li",{parentName:"ul"},"The cluster returns a single reply for each unique request it commits. The reply contains a\n",(0,a.kt)("a",{parentName:"li",href:"/reference/operations/create_transfers#result"},"result")," for each event in the request.")),(0,a.kt)("h2",{id:"batching-events"},"Batching Events"),(0,a.kt)("p",null,"To achieve high throughput, TigerBeetle amortizes the overhead of consensus and I/O by batching many\noperation events in each request. "),(0,a.kt)("p",null,"For the best performance, each request should batch as many events as possible. Typically this means\nfunneling events through fewer client instances (e.g. a single client instance per process)."),(0,a.kt)("p",null,"The maximum number of events per batch depends on the maximum message size and the operation type.\n(TODO: Expose each operation's batch sizes in the client)."),(0,a.kt)("p",null,"In the default configuration, the batch sizes are:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operation"),(0,a.kt)("th",{parentName:"tr",align:"right"},"Request Batch Size (Events)"),(0,a.kt)("th",{parentName:"tr",align:"right"},"Reply Batch Size (Results)"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"lookup_accounts")),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190"),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"lookup_transfers")),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190"),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"create_accounts")),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190"),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"create_transfers")),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190"),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"get_account_transfers")),(0,a.kt)("td",{parentName:"tr",align:"right"},"1"),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"get_account_history")),(0,a.kt)("td",{parentName:"tr",align:"right"},"1"),(0,a.kt)("td",{parentName:"tr",align:"right"},"8190")))),(0,a.kt)("p",null,"You can design your application to batch events manually. However, client instances automatically\nbatch requests of the same operation type. Therefore, sharing the same client instance between\nmultiple threads or tasks enables events to be batched transparently."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/clients/node#batching"},"Node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/clients/go#batching"},"Go")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/clients/java#batching"},"Java")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/clients/dotnet#batching"},".NET"))),(0,a.kt)("h2",{id:"example-api-layer-architecture"},"Example API Layer Architecture"),(0,a.kt)("p",null,"When building an application on TigerBeetle, you may want to use an intermediate API layer to batch\nevents."),(0,a.kt)("p",null,"This is primarily applicable if the number of services that need to query TigerBeetle:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/design/client-sessions#eviction"},"exceed ",(0,a.kt)("inlineCode",{parentName:"a"},"config.clients_max")),", or"),(0,a.kt)("li",{parentName:"ul"},"require additional ",(0,a.kt)("a",{parentName:"li",href:"#batching-events"},"batching")," to optimize throughput.")),(0,a.kt)("p",null,"Rather than each service connecting to TigerBeetle directly, you can set up your application\nservices to forward their requests to a pool of intermediate services, as illustrated below. This\nAPI layer can coalesce events from many application services into requests, and forward back the\nrespective replies."),(0,a.kt)("p",null,"(Note that TigerBeetle does not currently provide such an intermediate service layer or a client to\npool or connect to them.)"),(0,a.kt)("p",null,"One downside of this approach is that events submitted by the application may be applied out of\norder. Without this intermediary API layer, TigerBeetle clients ensure that operations are applied\nin the order they are submitted. However, if operations are submitted to two different API layer\ninstances, the operations may reach the TigerBeetle cluster in a different order, or one of the API\ninstances could crash and restart mid-request. "),(0,a.kt)("mermaid",{value:"flowchart LR\n    App1[Application service 1]\n    App2[Application service 2]\n    App3[Application service 3]\n    App4[Application service 4]\n    Cluster[TigerBeetle cluster]\n\n    App1 <--\x3e API1\n    App2 <--\x3e API1\n    App3 <--\x3e API2\n    App4 <--\x3e API2\n\n    subgraph API\n        API1{API 1}\n        API2{API 2}\n    end\n\n    API1 <--\x3e Cluster\n    API2 <--\x3e Cluster"}),(0,a.kt)("h3",{id:"queues-and-workers"},"Queues and Workers"),(0,a.kt)("p",null,"If you are making requests to TigerBeetle from workers pulling jobs from a queue, you can batch\nrequests to TigerBeetle by having the worker act on multiple jobs from the queue at once rather than\none at a time. i.e. pulling multiple jobs from the queue rather than just one."))}m.isMDXComponent=!0}}]);