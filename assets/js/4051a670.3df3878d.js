"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4396],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=c(a),p=r,m=h["".concat(l,".").concat(p)]||h[p]||d[p]||o;return a?n.createElement(m,s(s({ref:t},u),{},{components:a})):n.createElement(m,s({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3695:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:1},s="Built for OLTP",i={unversionedId:"about/oltp",id:"about/oltp",title:"Built for OLTP",description:"Online Transaction Processing (OLTP) is about recording business transactions in real-time. This",source:"@site/pages/about/oltp.md",sourceDirName:"about",slug:"/about/oltp",permalink:"/about/oltp",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/about/oltp.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"About TigerBeetle",permalink:"/about/"},next:{title:"Performance",permalink:"/about/performance"}},l={},c=[{value:"OLTP Requires High Performance",id:"oltp-requires-high-performance",level:2},{value:"Business Transactions Don&#39;t Shard Well",id:"business-transactions-dont-shard-well",level:3},{value:"OLTP Requires Strong Safety and Availability Guarantees",id:"oltp-requires-strong-safety-and-availability-guarantees",level:2},{value:"The &quot;Who, What, When, Where, Why, and How Much&quot; of OLTP",id:"the-who-what-when-where-why-and-how-much-of-oltp",level:2},{value:"TigerBeetle in the Hot Path",id:"tigerbeetle-in-the-hot-path",level:2},{value:"Conclusion: Accelerating OLTP for the Next Decades",id:"conclusion-accelerating-oltp-for-the-next-decades",level:2}],u={toc:c},h="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"built-for-oltp"},"Built for OLTP"),(0,r.kt)("p",null,"Online Transaction Processing (OLTP) is about recording business transactions in real-time. This\ncould be payments, sales, car sharing rides, or API usage."),(0,r.kt)("p",null,"For the last 20-30 years, OLTP has been handled by general purpose databases like PostgreSQL, MySQL,\nand SQLite, which we refer to as Online General Purpose (OLGP) databases. However, general purpose\ndatabases struggle to keep up with the extreme write contention of growing OLTP workloads today,\nwhich have increased by 3-4 orders of magnitude in the last 10 years alone."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In 2019, the UPI real-time payments switch in India processed 10 billion payments. In the month of\nJanuary 2024 alone, the switch processed 12 billion payments."),(0,r.kt)("li",{parentName:"ul"},"With the moves to cleaner energy and smart metering, energy is being traded by the Kilowatt-hour\nand billed to customers every 15 or 30 minutes rather than at the end of the month."),(0,r.kt)("li",{parentName:"ul"},"Serverless APIs charge for usage by the second or per-request, rather than per month. (Today,\nserverless billing at scale is often implemented using MapReduce, which makes it difficult or\nimpossible to offer customers real-time spending caps.)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TigerBeetle is built to handle the scale of OLTP workloads today and for the decades to come.")," It\nworks well alongside a general purpose database. The latter holds data that isn't updated very\nfrequently, such as account metadata, while TigerBeetle can race ahead processing transactions and\ngiving your system unparalleled latency and throughput."),(0,r.kt)("h2",{id:"oltp-requires-high-performance"},"OLTP Requires High Performance"),(0,r.kt)("p",null,"Transaction processing is the core of most business' software, which makes it the bottleneck for\nincreasing sales, processing payments, or serving API requests faster."),(0,r.kt)("p",null,"Because performance is so critical, it is common for companies to put caches like Redis in front of\na general purpose database to try to offload and speed up some types of queries. However, caching\nbrings its own set of headaches and does not help for write-heavy workloads."),(0,r.kt)("p",null,"At their core, the majority of general purpose databases use a B-Tree data structure, which is meant\nfor a combination of reads and writes. But OLTP is write-heavy. Each transaction coming in needs to\nbe inserted and update state such as an account balance."),(0,r.kt)("p",null,"Log-Structured Merge (LSM) Trees are optimized for write-heavy workloads. TigerBeetle uses LSM\nTrees, along with a number of other building blocks, to create a database that can handle the scale\nof OLTP today and for the next decades."),(0,r.kt)("p",null,"Read more about ",(0,r.kt)("a",{parentName:"p",href:"/about/performance"},"TigerBeetle's performance"),"."),(0,r.kt)("h3",{id:"business-transactions-dont-shard-well"},"Business Transactions Don't Shard Well"),(0,r.kt)("p",null,"Two of the main ways of scaling OLTP and billing systems today are sharding and MapReduce. However,\nboth of these present problems."),(0,r.kt)("p",null,"You could try to separate different groups of accounts into separate database clusters.\nUnfortunately, most accounting systems tend to have a few very hot accounts that are involved in a\nlarge number of transactions. For example, those representing the service operator's assets,\nliabilities, or income. You can shard accounts, but contention and row locks on the hot accounts\nbecome the bottleneck."),(0,r.kt)("p",null,"Alternatively, certain types of very high-volume transaction systems like billing for serverless\nusage might use MapReduce to total the balances after the fact. However, this makes it extremely\ndifficult to implement anything like real-time spending caps or live account balance views for\nusers."),(0,r.kt)("p",null,"TigerBeetle is designed to squeeze the maximum amount of transaction processing power out of the\nleader node, giving you financial consistency at massive scale."),(0,r.kt)("h2",{id:"oltp-requires-strong-safety-and-availability-guarantees"},"OLTP Requires Strong Safety and Availability Guarantees"),(0,r.kt)("p",null,"Transaction processing also requires strong safety guarantees to ensure that data cannot be lost,\nand high availability to ensure that money is not lost due to database downtime."),(0,r.kt)("p",null,"TigerBeetle takes a unique approach to safety and availability. It is designed to be run in a\nfault-tolerant cluster by default -- without needing a separate add-on or proprietary\nimplementation. It supports automatic failover in the same package to keep your service running\nsmoothly."),(0,r.kt)("p",null,"TigerBeetle is also built in a unique way that sets it apart from other OLTP databases. It is\n",(0,r.kt)("a",{parentName:"p",href:"/about/zig"},"written in Zig")," instead of C or C++, uses\n",(0,r.kt)("a",{parentName:"p",href:"https://tigerbeetle.com/blog/a-database-without-dynamic-memory"},"static memory allocation"),", imposes\nstrict limits on everything it does, and makes heavy use of\n",(0,r.kt)("a",{parentName:"p",href:"https://tigerbeetle.com/blog/2023-12-27-it-takes-two-to-contract"},"assertions")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness"},"simulation testing")," to\ncheck that code behaves exactly as expected."),(0,r.kt)("p",null,"Importantly, TigerBeetle is one of the only OLTP databases that was designed to handle storage\nfaults. Research on how storage faults affect databases only came out in 2018\n(",(0,r.kt)("a",{parentName:"p",href:"https://danluu.com/fsyncgate/"},'"fsyncgate 2018"'),"), and TigerBeetle was built from the ground up\nwith these lessons in mind. TigerBeetle uses cryptographic hash chains to detect storage faults, it\nsupports ",(0,r.kt)("a",{parentName:"p",href:"https://www.usenix.org/conference/fast18/presentation/alagappan"},"Protocol-Aware Recovery"),",\nand uses a deterministic on-disk format to speed up the cluster's recovery."),(0,r.kt)("p",null,"Read more about TigerBeetle's approach to ",(0,r.kt)("a",{parentName:"p",href:"/about/safety"},"safety"),"."),(0,r.kt)("h2",{id:"the-who-what-when-where-why-and-how-much-of-oltp"},'The "Who, What, When, Where, Why, and How Much" of OLTP'),(0,r.kt)("p",null,"OLTP and business transactions tend to record the same types of information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Who"),": which accounts are transacting?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"What"),": what type of asset or value is moving?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When"),": when was the transaction initiated or when was it finalized?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Where"),": where in the world did the transaction take place?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Why"),": what type of transaction is this or why is it happening?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"How Much"),": what quantity of the asset or items was moved?")),(0,r.kt)("p",null,"While SQL is a great query language for getting data out, OLTP is primarily about getting data in\nand this is where SQL falls short. It is ",(0,r.kt)("strong",{parentName:"p"},"very common for a single business transaction to require\nmultiple SQL queries (on the order of 10 SQL queries per transaction)")," and potentially even\nmultiple round-trips from the application to the database."),(0,r.kt)("p",null,"With TigerBeetle, these fields are already built into the schema and ready for you to use:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Who"),": the ",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#debit_account_id"},(0,r.kt)("inlineCode",{parentName:"a"},"debit_account_id"))," and\n",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#credit_account_id"},(0,r.kt)("inlineCode",{parentName:"a"},"credit_account_id"))," indicate which accounts are\ntransacting."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"What"),": each asset or type of value in TigerBeetle is tracked on a separate\n",(0,r.kt)("a",{parentName:"li",href:"/develop/data-modeling#ledgers"},"ledger"),". The\n",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#ledger"},(0,r.kt)("inlineCode",{parentName:"a"},"ledger"))," field indicates what is being transferred."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When"),": each transfer has a unique ",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#timestamp"},(0,r.kt)("inlineCode",{parentName:"a"},"timestamp"))," for\nwhen it is processed by the cluster, but you can add another timestamp representing when the\ntransaction happened in the real world in the\n",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#user_data_64"},(0,r.kt)("inlineCode",{parentName:"a"},"user_data_64"))," field."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Where"),": the ",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#user_data_32"},(0,r.kt)("inlineCode",{parentName:"a"},"user_data_32"))," can be used to store\nthe locale where the transfer occurred."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Why"),": the ",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#code"},(0,r.kt)("inlineCode",{parentName:"a"},"code"))," field stores the reason a transfer\noccurred and should map to an enum or table of all the possible business events."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"How Much"),": the ",(0,r.kt)("a",{parentName:"li",href:"/reference/transfer#amount"},(0,r.kt)("inlineCode",{parentName:"a"},"amount"))," indicates how much of the asset\nor item is being transferred.")),(0,r.kt)("p",null,"For centuries, this information has been modeled as debits and credits, and double-entry bookkeeping\nhas been the language of business since it was invented over 1000 years ago. TigerBeetle takes this\ntried-and-true schema and adds the performance and safety we need for OLTP in the 21st century."),(0,r.kt)("p",null,"By implementing double-entry accounting primitives directly in the database, TigerBeetle gives you\nunmatched financial consistency (on top of data consistency). Every transaction comes from one\naccount and goes to another, ensuring that money is always accounted for. Furthermore, TigerBeetle\nkeeps an immutable record of business events and entities, ensuring that transactions and balances\nare fully auditable."),(0,r.kt)("h2",{id:"tigerbeetle-in-the-hot-path"},"TigerBeetle in the Hot Path"),(0,r.kt)("p",null,"You can think about the relationship between TigerBeetle and a general purpose database as the\ndifference between the ",(0,r.kt)("em",{parentName:"p"},"data plane")," and ",(0,r.kt)("em",{parentName:"p"},"control plane"),"."),(0,r.kt)("p",null,"In routing internet packets, the data plane refers to everything involved in moving IP packets in\nreal-time. The control plane determines the network topology and makes decisions for how packets\nshould be routed. The data plane must be as fast and efficient as possible, whereas the control\nplane does not need to be touched as frequently."),(0,r.kt)("p",null,"TigerBeetle is designed to be in the hot path of your system, processing every transaction in\nreal-time. You can have a ",(0,r.kt)("a",{parentName:"p",href:"/develop/system-architecture"},"stateless API service")," construct and\nbatch transfers to send to TigerBeetle."),(0,r.kt)("p",null,"Metadata, such as account details or infrequently changed ledger details, can be stored in a general\npurpose database. Note, however, that it is important not to build your system such that it loads\nthe metadata on every transfer, because that would put the slower-moving general purpose database\nback in the hot path."),(0,r.kt)("h2",{id:"conclusion-accelerating-oltp-for-the-next-decades"},"Conclusion: Accelerating OLTP for the Next Decades"),(0,r.kt)("p",null,"Building your application on TigerBeetle gives you unmatched transaction processing power.\nTigerBeetle provides a fixed schema that maps naturally on to the who, what, when, where, why, and\nhow much of business transactions. And it is built to handle write-heavy and high-contention\nworkloads at high performance and with strong safety guarantees. TigerBeetle can help you build your\napplication correctly today, and it can handle the scale as your business grows."))}d.isMDXComponent=!0}}]);