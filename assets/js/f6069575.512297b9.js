"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[113],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),h=o,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return r?n.createElement(m,a(a({ref:t},c),{},{components:r})):n.createElement(m,a({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},6720:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:7},a="Cloud",l={unversionedId:"about/internals/cloud",id:"about/internals/cloud",title:"Cloud",description:'Tigerbeetle is optimized for performance, exploiting "close to the metal"',source:"@site/pages/about/internals/cloud.md",sourceDirName:"about/internals",slug:"/about/internals/cloud",permalink:"/about/internals/cloud",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/about/internals/cloud.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Releases",permalink:"/about/internals/releases"}},s={},u=[{value:"Direct I/O",id:"direct-io",level:2},{value:"io_uring",id:"io_uring",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cloud"},"Cloud"),(0,o.kt)("p",null,"Tigerbeetle is ",(0,o.kt)("a",{parentName:"p",href:"/about/performance"},"optimized for performance"),', exploiting "close to the metal"\ntechnologies such as ',(0,o.kt)("strong",{parentName:"p"},"Direct I/O")," and ",(0,o.kt)("strong",{parentName:"p"},"io_uring"),"."),(0,o.kt)("p",null,"This raises the question of whether or not these benefits are realised in a cloud environment where\nthe kernel is available to the app but where the network and the storage is virtualised."),(0,o.kt)("h2",{id:"direct-io"},"Direct I/O"),(0,o.kt)("p",null,"Direct I/O eliminates memory copies between user space and the kernel within the OS, so whether the\nOS is virtualized or not beyond that, Direct I/O would still be of benefit, and perhaps even more so\nin a cloud environment by virtue of reducing memory pressure and freeing up the more limited\nper-core memory bandwidth, especially with noisy neighbors."),(0,o.kt)("p",null,"A quick example, tested with Ubuntu in a VM on a Mac, we still see a 7% relative throughput\nimprovement for Direct I/O, regardless of whether Parallels is propagating O_DIRECT to the physical\ndisk, it\u2019s still saving the cost of the memcpy to Ubuntu\u2019s page cache (and beyond that appears to\nalso avoid polluting the CPU\u2019s L1-3 cache by memcpy\u2019ing through it - hard to be certain given all\nthe various memcpy() implementations)."),(0,o.kt)("p",null,"At the same time, where cloud environments support locally attached high-performance block devices\n(NVMe SSD), running local storage (as opposed to something like EBS) would definitely be preferable\nif only from a performance point of view."),(0,o.kt)("p",null,"From a safety point of view, we haven\u2019t yet tested whether any VMs would disregard O_DIRECT for an\nNVMe device, or interpolate their own block device caching layer and mark dirty pages as clean\ndespite an EIO disk fault, but after a physical system reboot our hash-chaining and ongoing disk\nscrubbing would at least be able to detect any issues related to this."),(0,o.kt)("p",null,"We are intentionally designing TigerBeetle to repair these local storage failures automatically on a\nfine-grained basis using cluster redundancy."),(0,o.kt)("h2",{id:"io_uring"},"io_uring"),(0,o.kt)("p",null,"In a similar way, io_uring removes (or amortizes by orders of magnitude) the cost of syscalls\nbetween user space and the kernel, regardless of whether those are both within a virtualized\nenvironment or not. io_uring is being developed by Jens Axboe specifically to reduce the cost of\nlarge scale server fleets, which are typically cloud native, and there\u2019s already been\n",(0,o.kt)("a",{parentName:"p",href:"https://www.phoronix.com/scan.php?page=news_item&px=KVM-IO-uring-Passthrough-LF2020"},"work done")," to\nshare the host\u2019s io_uring queues with virtualized guests."),(0,o.kt)("p",null,"Our testing is only getting started though, we\u2019re still building out the system end to end, so it\nwill be great to benchmark more performance numbers in various environments (and across cloud\nproviders) and share these as we go."),(0,o.kt)("p",null,"Credit to @tdaly61 from the Mojaloop community for prompting us with some great questions about\nTigerbeetle in the cloud."),(0,o.kt)("p",null,"You can read more about how we use io_uring in\n",(0,o.kt)("a",{parentName:"p",href:"https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue"},"A Programmer-Friendly I/O Abstraction Over io_uring and kqueue"),"."))}d.isMDXComponent=!0}}]);