"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),d=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(o.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,h=u["".concat(o,".").concat(m)]||u[m]||p[m]||r;return n?i.createElement(h,s(s({ref:t},c),{},{components:n})):i.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var d=2;d<r;d++)s[d]=n[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1},s="Accounts",l={unversionedId:"reference/accounts",id:"reference/accounts",title:"Accounts",description:"An Account is a record storing the cumulative effect of committed",source:"@site/pages/reference/accounts.md",sourceDirName:"reference",slug:"/reference/accounts",permalink:"/reference/accounts",draft:!1,editUrl:"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/reference/accounts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Node.js",permalink:"/clients/node"},next:{title:"Transfers",permalink:"/reference/transfers"}},o={},d=[{value:"Updates",id:"updates",level:3},{value:"Deletion",id:"deletion",level:3},{value:"Fields",id:"fields",level:2},{value:"<code>id</code>",id:"id",level:3},{value:"<code>debits_pending</code>",id:"debits_pending",level:3},{value:"<code>debits_posted</code>",id:"debits_posted",level:3},{value:"<code>credits_pending</code>",id:"credits_pending",level:3},{value:"<code>credits_posted</code>",id:"credits_posted",level:3},{value:"<code>user_data_128</code>",id:"user_data_128",level:3},{value:"<code>user_data_64</code>",id:"user_data_64",level:3},{value:"<code>user_data_32</code>",id:"user_data_32",level:3},{value:"<code>reserved</code>",id:"reserved",level:3},{value:"<code>ledger</code>",id:"ledger",level:3},{value:"<code>code</code>",id:"code",level:3},{value:"<code>flags</code>",id:"flags",level:3},{value:"<code>flags.linked</code>",id:"flagslinked",level:4},{value:"<code>flags.debits_must_not_exceed_credits</code>",id:"flagsdebits_must_not_exceed_credits",level:4},{value:"<code>flags.credits_must_not_exceed_debits</code>",id:"flagscredits_must_not_exceed_debits",level:4},{value:"<code>flags.history</code>",id:"flagshistory",level:4},{value:"<code>timestamp</code>",id:"timestamp",level:3},{value:"Internals",id:"internals",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"accounts"},"Accounts"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"Account")," is a record storing the cumulative effect of committed\n",(0,a.kt)("a",{parentName:"p",href:"/reference/transfers"},"transfers"),"."),(0,a.kt)("h3",{id:"updates"},"Updates"),(0,a.kt)("p",null,"Account fields ",(0,a.kt)("em",{parentName:"p"},"cannot be changed by the user")," after\ncreation. However, debits and credits fields are updated by\nTigerBeetle as transfers move money to and from an account."),(0,a.kt)("h3",{id:"deletion"},"Deletion"),(0,a.kt)("p",null,"Accounts ",(0,a.kt)("strong",{parentName:"p"},"cannot be deleted")," after creation. This provides a strong guarantee for an audit trail\n-- and the account record is only 128 bytes."),(0,a.kt)("p",null,"If an account is no longer in use, you may want to ",(0,a.kt)("a",{parentName:"p",href:"/recipes/close-account"},"zero out its\nbalance"),"."),(0,a.kt)("h2",{id:"fields"},"Fields"),(0,a.kt)("h3",{id:"id"},(0,a.kt)("inlineCode",{parentName:"h3"},"id")),(0,a.kt)("p",null,"This is a unique, client-defined identifier for the account."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must not be zero or ",(0,a.kt)("inlineCode",{parentName:"li"},"2^128 - 1")," (the highest 128-bit unsigned integer)"),(0,a.kt)("li",{parentName:"ul"},"Must not conflict with another account in the cluster")),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"/design/data-modeling#id"},(0,a.kt)("inlineCode",{parentName:"a"},"id")," section in the data modeling doc")," for more\nrecommendations on choosing an ID scheme."),(0,a.kt)("p",null,"Note that account IDs are unique for the cluster -- not per ledger. If you want to store a\nrelationship between accounts, such as indicating that multiple accounts on different ledgers belong\nto the same user, you should store a user ID in one of the ",(0,a.kt)("a",{parentName:"p",href:"#user_data_128"},(0,a.kt)("inlineCode",{parentName:"a"},"user_data"))," fields."),(0,a.kt)("h3",{id:"debits_pending"},(0,a.kt)("inlineCode",{parentName:"h3"},"debits_pending")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"debits_pending")," counts debits reserved by pending transfers. When a pending transfer posts, voids,\nor times out, the amount is removed from ",(0,a.kt)("inlineCode",{parentName:"p"},"debits_pending"),"."),(0,a.kt)("p",null,"Money in ",(0,a.kt)("inlineCode",{parentName:"p"},"debits_pending")," is reserved \u2014 that is, it cannot be spent until the corresponding pending\ntransfer resolves."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,a.kt)("h3",{id:"debits_posted"},(0,a.kt)("inlineCode",{parentName:"h3"},"debits_posted")),(0,a.kt)("p",null,"Amount of posted debits."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,a.kt)("h3",{id:"credits_pending"},(0,a.kt)("inlineCode",{parentName:"h3"},"credits_pending")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"credits_pending")," counts credits reserved by pending transfers. When a pending transfer posts, voids,\nor times out, the amount is removed from ",(0,a.kt)("inlineCode",{parentName:"p"},"credits_pending"),"."),(0,a.kt)("p",null,"Money in ",(0,a.kt)("inlineCode",{parentName:"p"},"credits_pending")," is reserved \u2014 that is, it cannot be spent until the corresponding pending\ntransfer resolves."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,a.kt)("h3",{id:"credits_posted"},(0,a.kt)("inlineCode",{parentName:"h3"},"credits_posted")),(0,a.kt)("p",null,"Amount of posted credits."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must be zero when the account is created")),(0,a.kt)("h3",{id:"user_data_128"},(0,a.kt)("inlineCode",{parentName:"h3"},"user_data_128")),(0,a.kt)("p",null,"This is an optional 128-bit secondary identifier to link this account to an\nexternal entity or event."),(0,a.kt)("p",null,"As an example, you might use a\n",(0,a.kt)("a",{parentName:"p",href:"/design/data-modeling#tigerbeetle-time-based-identifiers-recommended"},"ULID")," that ties together\na group of accounts."),(0,a.kt)("p",null,"For more information, see ",(0,a.kt)("a",{parentName:"p",href:"/design/data-modeling#user_data"},"Data Modeling"),"."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 128-bit unsigned integer (16 bytes)")),(0,a.kt)("h3",{id:"user_data_64"},(0,a.kt)("inlineCode",{parentName:"h3"},"user_data_64")),(0,a.kt)("p",null,"This is an optional 64-bit secondary identifier to link this account to an\nexternal entity or event."),(0,a.kt)("p",null,"As an example, you might use this field store an external timestamp."),(0,a.kt)("p",null,"For more information, see ",(0,a.kt)("a",{parentName:"p",href:"/design/data-modeling#user_data"},"Data Modeling"),"."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 64-bit unsigned integer (8 bytes)")),(0,a.kt)("h3",{id:"user_data_32"},(0,a.kt)("inlineCode",{parentName:"h3"},"user_data_32")),(0,a.kt)("p",null,"This is an optional 32-bit secondary identifier to link this account to an\nexternal entity or event."),(0,a.kt)("p",null,"As an example, you might use this field to store a timezone or locale."),(0,a.kt)("p",null,"For more information, see ",(0,a.kt)("a",{parentName:"p",href:"/design/data-modeling#user_data"},"Data Modeling"),"."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)")),(0,a.kt)("h3",{id:"reserved"},(0,a.kt)("inlineCode",{parentName:"h3"},"reserved")),(0,a.kt)("p",null,"This space may be used for additional data in the future."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 4 bytes"),(0,a.kt)("li",{parentName:"ul"},"Must be zero")),(0,a.kt)("h3",{id:"ledger"},(0,a.kt)("inlineCode",{parentName:"h3"},"ledger")),(0,a.kt)("p",null,"This is an identifier that partitions the sets of accounts that can\ntransact with each other."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/design/data-modeling#ledger"},"data modeling")," for more details\nabout how to think about setting up your ledgers."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 32-bit unsigned integer (4 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must not be zero")),(0,a.kt)("h3",{id:"code"},(0,a.kt)("inlineCode",{parentName:"h3"},"code")),(0,a.kt)("p",null,"This is a user-defined enum denoting the category of the account."),(0,a.kt)("p",null,"As an example, you might use codes ",(0,a.kt)("inlineCode",{parentName:"p"},"1000"),"-",(0,a.kt)("inlineCode",{parentName:"p"},"3340")," to indicate asset\naccounts in general, where ",(0,a.kt)("inlineCode",{parentName:"p"},"1001")," is Bank Account and ",(0,a.kt)("inlineCode",{parentName:"p"},"1002")," is Money\nMarket Account and ",(0,a.kt)("inlineCode",{parentName:"p"},"2003")," is Motor Vehicles and so on."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 16-bit unsigned integer (2 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must not be zero")),(0,a.kt)("h3",{id:"flags"},(0,a.kt)("inlineCode",{parentName:"h3"},"flags")),(0,a.kt)("p",null,"A bitfield that toggles additional behavior."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 16-bit unsigned integer (2 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Some flags are mutually exclusive; see\n",(0,a.kt)("a",{parentName:"li",href:"/reference/operations/create_accounts#flags_are_mutually_exclusive"},(0,a.kt)("inlineCode",{parentName:"a"},"flags_are_mutually_exclusive")),".")),(0,a.kt)("h4",{id:"flagslinked"},(0,a.kt)("inlineCode",{parentName:"h4"},"flags.linked")),(0,a.kt)("p",null,"This flag links the result of this account creation to the result of the next one in the request,\nsuch that they will either succeed or fail together."),(0,a.kt)("p",null,"The last account in a chain of linked accounts does ",(0,a.kt)("strong",{parentName:"p"},"not")," have this flag set."),(0,a.kt)("p",null,"You can read more about ",(0,a.kt)("a",{parentName:"p",href:"/design/client-requests#linked-events"},"linked events"),"."),(0,a.kt)("h4",{id:"flagsdebits_must_not_exceed_credits"},(0,a.kt)("inlineCode",{parentName:"h4"},"flags.debits_must_not_exceed_credits")),(0,a.kt)("p",null,"When set, transfers will be rejected that would cause this account's\ndebits to exceed credits. Specifically when ",(0,a.kt)("inlineCode",{parentName:"p"},"account.debits_pending +\naccount.debits_posted + transfer.amount > account.credits_posted"),"."),(0,a.kt)("p",null,"This cannot be set when ",(0,a.kt)("inlineCode",{parentName:"p"},"credits_must_not_exceed_debits")," is also set."),(0,a.kt)("h4",{id:"flagscredits_must_not_exceed_debits"},(0,a.kt)("inlineCode",{parentName:"h4"},"flags.credits_must_not_exceed_debits")),(0,a.kt)("p",null,"When set, transfers will be rejected that would cause this account's\ncredits to exceed debits. Specifically when ",(0,a.kt)("inlineCode",{parentName:"p"},"account.credits_pending +\naccount.credits_posted + transfer.amount > account.debits_posted"),"."),(0,a.kt)("p",null,"This cannot be set when ",(0,a.kt)("inlineCode",{parentName:"p"},"debits_must_not_exceed_credits")," is also set."),(0,a.kt)("h4",{id:"flagshistory"},(0,a.kt)("inlineCode",{parentName:"h4"},"flags.history")),(0,a.kt)("p",null,"When set, the account will retain the history of balances at each transfer."),(0,a.kt)("h3",{id:"timestamp"},(0,a.kt)("inlineCode",{parentName:"h3"},"timestamp")),(0,a.kt)("p",null,"This is the time the account was created, as nanoseconds since\nUNIX epoch."),(0,a.kt)("p",null,"It is set by TigerBeetle to the moment the account arrives at\nthe cluster."),(0,a.kt)("p",null,"You can read more about ",(0,a.kt)("a",{parentName:"p",href:"/design/time"},"Time in TigerBeetle"),"."),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type is 64-bit unsigned integer (8 bytes)"),(0,a.kt)("li",{parentName:"ul"},"Must be set to ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," by the user when the ",(0,a.kt)("inlineCode",{parentName:"li"},"Account")," is created")),(0,a.kt)("h2",{id:"internals"},"Internals"),(0,a.kt)("p",null,"If you're curious and want to learn more, you can find the source code\nfor this struct in\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/tigerbeetle.zig"},"src/tigerbeetle.zig"),". Search\nfor ",(0,a.kt)("inlineCode",{parentName:"p"},"const Account = extern struct {"),"."),(0,a.kt)("p",null,"You can find the source code for creating an account in\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/blob/main/src/state_machine.zig"},"src/state_machine.zig"),". Search\nfor ",(0,a.kt)("inlineCode",{parentName:"p"},"fn create_account("),"."))}p.isMDXComponent=!0}}]);